!function(t){var n=window.webpackHotUpdate;window.webpackHotUpdate=function(t,e){!function(t,n){if(!_[t]||!w[t])return;for(var e in w[t]=!1,n)Object.prototype.hasOwnProperty.call(n,e)&&(p[e]=n[e]);0==--g&&0===v&&A()}(t,e),n&&n(t,e)};var e,r=!0,o="cd84ef014e9f7238c5fa",i=1e4,a={},u=[],c=[];function s(t){var n=E[t];if(!n)return k;var r=function(r){return n.hot.active?(E[r]?-1===E[r].parents.indexOf(t)&&E[r].parents.push(t):(u=[t],e=r),-1===n.children.indexOf(r)&&n.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+t),u=[]),k(r)},o=function(t){return{configurable:!0,enumerable:!0,get:function(){return k[t]},set:function(n){k[t]=n}}};for(var i in k)Object.prototype.hasOwnProperty.call(k,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(t){return"ready"===f&&h("prepare"),v++,k.e(t).then(n,function(t){throw n(),t});function n(){v--,"prepare"===f&&(m[t]||x(t),0===v&&0===g&&A())}},r.t=function(t,n){return 1&n&&(t=r(t)),k.t(t,-2&n)},r}var l=[],f="idle";function h(t){f=t;for(var n=0;n<l.length;n++)l[n].call(null,t)}var d,p,y,g=0,v=0,m={},w={},_={};function b(t){return+t+""===t?+t:t}function M(t){if("idle"!==f)throw new Error("check() is only allowed in idle status");return r=t,h("check"),function(t){return t=t||1e4,new Promise(function(n,e){if("undefined"==typeof XMLHttpRequest)return e(new Error("No browser support"));try{var r=new XMLHttpRequest,i=k.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(t){return e(t)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)e(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)n();else if(200!==r.status&&304!==r.status)e(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(t){return void e(t)}n(t)}}})}(i).then(function(t){if(!t)return h("idle"),null;w={},m={},_=t.c,y=t.h,h("prepare");var n=new Promise(function(t,n){d={resolve:t,reject:n}});p={};return x(0),"prepare"===f&&0===v&&0===g&&A(),n})}function x(t){_[t]?(w[t]=!0,g++,function(t){var n=document.getElementsByTagName("head")[0],e=document.createElement("script");e.charset="utf-8",e.src=k.p+""+t+"."+o+".hot-update.js",n.appendChild(e)}(t)):m[t]=!0}function A(){h("ready");var t=d;if(d=null,t)if(r)Promise.resolve().then(function(){return T(r)}).then(function(n){t.resolve(n)},function(n){t.reject(n)});else{var n=[];for(var e in p)Object.prototype.hasOwnProperty.call(p,e)&&n.push(b(e));t.resolve(n)}}function T(n){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var e,r,i,c,s;function l(t){for(var n=[t],e={},r=n.slice().map(function(t){return{chain:[t],id:t}});r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((c=E[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var u=0;u<c.parents.length;u++){var s=c.parents[u],l=E[s];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([s]),moduleId:i,parentId:s};-1===n.indexOf(s)&&(l.hot._acceptedDependencies[i]?(e[s]||(e[s]=[]),d(e[s],[i])):(delete e[s],n.push(s),r.push({chain:a.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:t,outdatedModules:n,outdatedDependencies:e}}function d(t,n){for(var e=0;e<n.length;e++){var r=n[e];-1===t.indexOf(r)&&t.push(r)}}n=n||{};var g={},v=[],m={},w=function(){console.warn("[HMR] unexpected require("+x.moduleId+") to disposed module")};for(var M in p)if(Object.prototype.hasOwnProperty.call(p,M)){var x;s=b(M);var A=!1,T=!1,S=!1,C="";switch((x=p[M]?l(s):{type:"disposed",moduleId:M}).chain&&(C="\nUpdate propagation: "+x.chain.join(" -> ")),x.type){case"self-declined":n.onDeclined&&n.onDeclined(x),n.ignoreDeclined||(A=new Error("Aborted because of self decline: "+x.moduleId+C));break;case"declined":n.onDeclined&&n.onDeclined(x),n.ignoreDeclined||(A=new Error("Aborted because of declined dependency: "+x.moduleId+" in "+x.parentId+C));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(x),n.ignoreUnaccepted||(A=new Error("Aborted because "+s+" is not accepted"+C));break;case"accepted":n.onAccepted&&n.onAccepted(x),T=!0;break;case"disposed":n.onDisposed&&n.onDisposed(x),S=!0;break;default:throw new Error("Unexception type "+x.type)}if(A)return h("abort"),Promise.reject(A);if(T)for(s in m[s]=p[s],d(v,x.outdatedModules),x.outdatedDependencies)Object.prototype.hasOwnProperty.call(x.outdatedDependencies,s)&&(g[s]||(g[s]=[]),d(g[s],x.outdatedDependencies[s]));S&&(d(v,[x.moduleId]),m[s]=w)}var D,U=[];for(r=0;r<v.length;r++)s=v[r],E[s]&&E[s].hot._selfAccepted&&U.push({module:s,errorHandler:E[s].hot._selfAccepted});h("dispose"),Object.keys(_).forEach(function(t){!1===_[t]&&function(t){delete installedChunks[t]}(t)});for(var O,j,N=v.slice();N.length>0;)if(s=N.pop(),c=E[s]){var P={},F=c.hot._disposeHandlers;for(i=0;i<F.length;i++)(e=F[i])(P);for(a[s]=P,c.hot.active=!1,delete E[s],delete g[s],i=0;i<c.children.length;i++){var H=E[c.children[i]];H&&((D=H.parents.indexOf(s))>=0&&H.parents.splice(D,1))}}for(s in g)if(Object.prototype.hasOwnProperty.call(g,s)&&(c=E[s]))for(j=g[s],i=0;i<j.length;i++)O=j[i],(D=c.children.indexOf(O))>=0&&c.children.splice(D,1);for(s in h("apply"),o=y,m)Object.prototype.hasOwnProperty.call(m,s)&&(t[s]=m[s]);var I=null;for(s in g)if(Object.prototype.hasOwnProperty.call(g,s)&&(c=E[s])){j=g[s];var B=[];for(r=0;r<j.length;r++)if(O=j[r],e=c.hot._acceptedDependencies[O]){if(-1!==B.indexOf(e))continue;B.push(e)}for(r=0;r<B.length;r++){e=B[r];try{e(j)}catch(t){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:s,dependencyId:j[r],error:t}),n.ignoreErrored||I||(I=t)}}}for(r=0;r<U.length;r++){var L=U[r];s=L.module,u=[s];try{k(s)}catch(t){if("function"==typeof L.errorHandler)try{L.errorHandler(t)}catch(e){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:s,error:e,originalError:t}),n.ignoreErrored||I||(I=e),I||(I=t)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:s,error:t}),n.ignoreErrored||I||(I=t)}}return I?(h("fail"),Promise.reject(I)):(h("idle"),new Promise(function(t){t(v)}))}var E={};function k(n){if(E[n])return E[n].exports;var r=E[n]={i:n,l:!1,exports:{},hot:function(t){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:e!==t,active:!0,accept:function(t,e){if(void 0===t)n._selfAccepted=!0;else if("function"==typeof t)n._selfAccepted=t;else if("object"==typeof t)for(var r=0;r<t.length;r++)n._acceptedDependencies[t[r]]=e||function(){};else n._acceptedDependencies[t]=e||function(){}},decline:function(t){if(void 0===t)n._selfDeclined=!0;else if("object"==typeof t)for(var e=0;e<t.length;e++)n._declinedDependencies[t[e]]=!0;else n._declinedDependencies[t]=!0},dispose:function(t){n._disposeHandlers.push(t)},addDisposeHandler:function(t){n._disposeHandlers.push(t)},removeDisposeHandler:function(t){var e=n._disposeHandlers.indexOf(t);e>=0&&n._disposeHandlers.splice(e,1)},check:M,apply:T,status:function(t){if(!t)return f;l.push(t)},addStatusHandler:function(t){l.push(t)},removeStatusHandler:function(t){var n=l.indexOf(t);n>=0&&l.splice(n,1)},data:a[t]};return e=void 0,n}(n),parents:(c=u,u=[],c),children:[]};return t[n].call(r.exports,r,r.exports,s(n)),r.l=!0,r.exports}k.m=t,k.c=E,k.d=function(t,n,e){k.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},k.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},k.t=function(t,n){if(1&n&&(t=k(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(k.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)k.d(e,r,function(n){return t[n]}.bind(null,r));return e},k.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return k.d(n,"a",n),n},k.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},k.p="",k.h=function(){return o},s(4)(k.s=4)}([function(t,n,e){(function(n,e){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.5+7f2b526d
 */
!function(n,e){t.exports=e()}(0,function(){"use strict";function t(t){return"function"==typeof t}var r=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},o=0,i=void 0,a=void 0,u=function(t,n){p[o]=t,p[o+1]=n,2===(o+=2)&&(a?a(y):g())};var c="undefined"!=typeof window?window:void 0,s=c||{},l=s.MutationObserver||s.WebKitMutationObserver,f="undefined"==typeof self&&void 0!==n&&"[object process]"==={}.toString.call(n),h="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function d(){var t=setTimeout;return function(){return t(y,1)}}var p=new Array(1e3);function y(){for(var t=0;t<o;t+=2){(0,p[t])(p[t+1]),p[t]=void 0,p[t+1]=void 0}o=0}var g=void 0;function v(t,n){var e=this,r=new this.constructor(_);void 0===r[w]&&P(r);var o=e._state;if(o){var i=arguments[o-1];u(function(){return j(o,r,i,e._result)})}else U(e,r,t,n);return r}function m(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var n=new this(_);return k(n,t),n}g=f?function(){return n.nextTick(y)}:l?function(){var t=0,n=new l(y),e=document.createTextNode("");return n.observe(e,{characterData:!0}),function(){e.data=t=++t%2}}():h?function(){var t=new MessageChannel;return t.port1.onmessage=y,function(){return t.port2.postMessage(0)}}():void 0===c?function(){try{var t=Function("return this")().require("vertx");return void 0!==(i=t.runOnLoop||t.runOnContext)?function(){i(y)}:d()}catch(t){return d()}}():d();var w=Math.random().toString(36).substring(2);function _(){}var b=void 0,M=1,x=2,A={error:null};function T(t){try{return t.then}catch(t){return A.error=t,A}}function E(n,e,r){e.constructor===n.constructor&&r===v&&e.constructor.resolve===m?function(t,n){n._state===M?C(t,n._result):n._state===x?D(t,n._result):U(n,void 0,function(n){return k(t,n)},function(n){return D(t,n)})}(n,e):r===A?(D(n,A.error),A.error=null):void 0===r?C(n,e):t(r)?function(t,n,e){u(function(t){var r=!1,o=function(t,n,e,r){try{t.call(n,e,r)}catch(t){return t}}(e,n,function(e){r||(r=!0,n!==e?k(t,e):C(t,e))},function(n){r||(r=!0,D(t,n))},t._label);!r&&o&&(r=!0,D(t,o))},t)}(n,e,r):C(n,e)}function k(t,n){t===n?D(t,new TypeError("You cannot resolve a promise with itself")):!function(t){var n=typeof t;return null!==t&&("object"===n||"function"===n)}(n)?C(t,n):E(t,n,T(n))}function S(t){t._onerror&&t._onerror(t._result),O(t)}function C(t,n){t._state===b&&(t._result=n,t._state=M,0!==t._subscribers.length&&u(O,t))}function D(t,n){t._state===b&&(t._state=x,t._result=n,u(S,t))}function U(t,n,e,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=n,o[i+M]=e,o[i+x]=r,0===i&&t._state&&u(O,t)}function O(t){var n=t._subscribers,e=t._state;if(0!==n.length){for(var r=void 0,o=void 0,i=t._result,a=0;a<n.length;a+=3)r=n[a],o=n[a+e],r?j(e,r,o,i):o(i);t._subscribers.length=0}}function j(n,e,r,o){var i=t(r),a=void 0,u=void 0,c=void 0,s=void 0;if(i){if((a=function(t,n){try{return t(n)}catch(t){return A.error=t,A}}(r,o))===A?(s=!0,u=a.error,a.error=null):c=!0,e===a)return void D(e,new TypeError("A promises callback cannot return that same promise."))}else a=o,c=!0;e._state!==b||(i&&c?k(e,a):s?D(e,u):n===M?C(e,a):n===x&&D(e,a))}var N=0;function P(t){t[w]=N++,t._state=void 0,t._result=void 0,t._subscribers=[]}var F=function(){function t(t,n){this._instanceConstructor=t,this.promise=new t(_),this.promise[w]||P(this.promise),r(n)?(this.length=n.length,this._remaining=n.length,this._result=new Array(this.length),0===this.length?C(this.promise,this._result):(this.length=this.length||0,this._enumerate(n),0===this._remaining&&C(this.promise,this._result))):D(this.promise,new Error("Array Methods must be provided an Array"))}return t.prototype._enumerate=function(t){for(var n=0;this._state===b&&n<t.length;n++)this._eachEntry(t[n],n)},t.prototype._eachEntry=function(t,n){var e=this._instanceConstructor,r=e.resolve;if(r===m){var o=T(t);if(o===v&&t._state!==b)this._settledAt(t._state,n,t._result);else if("function"!=typeof o)this._remaining--,this._result[n]=t;else if(e===H){var i=new e(_);E(i,t,o),this._willSettleAt(i,n)}else this._willSettleAt(new e(function(n){return n(t)}),n)}else this._willSettleAt(r(t),n)},t.prototype._settledAt=function(t,n,e){var r=this.promise;r._state===b&&(this._remaining--,t===x?D(r,e):this._result[n]=e),0===this._remaining&&C(r,this._result)},t.prototype._willSettleAt=function(t,n){var e=this;U(t,void 0,function(t){return e._settledAt(M,n,t)},function(t){return e._settledAt(x,n,t)})},t}();var H=function(){function n(t){this[w]=N++,this._result=this._state=void 0,this._subscribers=[],_!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof n?function(t,n){try{n(function(n){k(t,n)},function(n){D(t,n)})}catch(n){D(t,n)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return n.prototype.catch=function(t){return this.then(null,t)},n.prototype.finally=function(n){var e=this.constructor;return t(n)?this.then(function(t){return e.resolve(n()).then(function(){return t})},function(t){return e.resolve(n()).then(function(){throw t})}):this.then(n,n)},n}();return H.prototype.then=v,H.all=function(t){return new F(this,t).promise},H.race=function(t){var n=this;return r(t)?new n(function(e,r){for(var o=t.length,i=0;i<o;i++)n.resolve(t[i]).then(e,r)}):new n(function(t,n){return n(new TypeError("You must pass an array to race."))})},H.resolve=m,H.reject=function(t){var n=new this(_);return D(n,t),n},H._setScheduler=function(t){a=t},H._setAsap=function(t){u=t},H._asap=u,H.polyfill=function(){var t=void 0;if(void 0!==e)t=e;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=t.Promise;if(n){var r=null;try{r=Object.prototype.toString.call(n.resolve())}catch(t){}if("[object Promise]"===r&&!n.cast)return}t.Promise=H},H.Promise=H,H})}).call(this,e(2),e(3))},function(t,n,e){},function(t,n){var e,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var c,s=[],l=!1,f=-1;function h(){l&&c&&(l=!1,c.length?s=c.concat(s):f=-1,s.length&&d())}function d(){if(!l){var t=u(h);l=!0;for(var n=s.length;n;){for(c=s,s=[];++f<n;)c&&c[f].run();f=-1,n=s.length}c=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(n){try{return r.call(null,t)}catch(n){return r.call(this,t)}}}(t)}}function p(t,n){this.fun=t,this.array=n}function y(){}o.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)n[e-1]=arguments[e];s.push(new p(t,n)),1!==s.length||l||u(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,n){var e;e=function(){return this}();try{e=e||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){"use strict";e.r(n);e(1);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},o=function(t){return 1===t.length&&(t=function(t){return function(n,e){return r(t(n),e)}}(t)),{left:function(n,e,r,o){for(null==r&&(r=0),null==o&&(o=n.length);r<o;){var i=r+o>>>1;t(n[i],e)<0?r=i+1:o=i}return r},right:function(n,e,r,o){for(null==r&&(r=0),null==o&&(o=n.length);r<o;){var i=r+o>>>1;t(n[i],e)>0?o=i:r=i+1}return r}}};var i=o(r),a=i.right,u=(i.left,a);var c=function(t,n){var e,r,o,i=t.length,a=-1;if(null==n){for(;++a<i;)if(null!=(e=t[a])&&e>=e)for(r=o=e;++a<i;)null!=(e=t[a])&&(r>e&&(r=e),o<e&&(o=e))}else for(;++a<i;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=o=e;++a<i;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),o<e&&(o=e));return[r,o]},s=Array.prototype,l=(s.slice,s.map,Math.sqrt(50)),f=Math.sqrt(10),h=Math.sqrt(2),d=function(t,n,e){var r,o,i,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(o=t,t=n,n=o),0===(a=p(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),i=new Array(o=Math.ceil(n-t+1));++u<o;)i[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),i=new Array(o=Math.ceil(t-n+1));++u<o;)i[u]=(t-u)/a;return r&&i.reverse(),i};function p(t,n,e){var r=(n-t)/Math.max(0,e),o=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,o);return o>=0?(i>=l?10:i>=f?5:i>=h?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(i>=l?10:i>=f?5:i>=h?2:1)}var y=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},g=function(t){return(t=y(Math.abs(t)))?t[1]:NaN},v=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function m(t){return new w(t)}function w(t){if(!(n=v.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}m.prototype=w.prototype,w.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var _,b,M,x=function(t){t:for(var n,e=t.length,r=1,o=-1;r<e;++r)switch(t[r]){case".":o=n=r;break;case"0":0===o&&(o=r),n=r;break;default:if(o>0){if(!+t[r])break t;o=0}}return o>0?t.slice(0,o)+t.slice(n+1):t},A=function(t,n){var e=y(t,n);if(!e)return t+"";var r=e[0],o=e[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")},T={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return A(100*t,n)},r:A,s:function(t,n){var e=y(t,n);if(!e)return t+"";var r=e[0],o=e[1],i=o-(_=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,a=r.length;return i===a?r:i>a?r+new Array(i-a+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+y(t,Math.max(0,n+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},E=function(t){return t},k=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],S=function(t){var n=t.grouping&&t.thousands?function(t,n){return function(e,r){for(var o=e.length,i=[],a=0,u=t[0],c=0;o>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),i.push(e.substring(o-=u,o+u)),!((c+=u+1)>r));)u=t[a=(a+1)%t.length];return i.reverse().join(n)}}(t.grouping,t.thousands):E,e=t.currency,r=t.decimal,o=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):E,i=t.percent||"%";function a(t){var a=(t=m(t)).fill,u=t.align,c=t.sign,s=t.symbol,l=t.zero,f=t.width,h=t.comma,d=t.precision,p=t.trim,y=t.type;"n"===y?(h=!0,y="g"):T[y]||(null==d&&(d=12),p=!0,y="g"),(l||"0"===a&&"="===u)&&(l=!0,a="0",u="=");var g="$"===s?e[0]:"#"===s&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",v="$"===s?e[1]:/[%p]/.test(y)?i:"",w=T[y],b=/[defgprs%]/.test(y);function M(t){var e,i,s,m=g,M=v;if("c"===y)M=w(t)+M,t="";else{var A=(t=+t)<0;if(t=w(Math.abs(t),d),p&&(t=x(t)),A&&0==+t&&(A=!1),m=(A?"("===c?c:"-":"-"===c||"("===c?"":c)+m,M=("s"===y?k[8+_/3]:"")+M+(A&&"("===c?")":""),b)for(e=-1,i=t.length;++e<i;)if(48>(s=t.charCodeAt(e))||s>57){M=(46===s?r+t.slice(e+1):t.slice(e))+M,t=t.slice(0,e);break}}h&&!l&&(t=n(t,1/0));var T=m.length+t.length+M.length,E=T<f?new Array(f-T+1).join(a):"";switch(h&&l&&(t=n(E+t,E.length?f-M.length:1/0),E=""),u){case"<":t=m+t+M+E;break;case"=":t=m+E+t+M;break;case"^":t=E.slice(0,T=E.length>>1)+m+t+M+E.slice(T);break;default:t=E+m+t+M}return o(t)}return d=null==d?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),M.toString=function(){return t+""},M}return{format:a,formatPrefix:function(t,n){var e=a(((t=m(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(g(n)/3))),o=Math.pow(10,-r),i=k[8+r/3];return function(t){return e(o*t)+i}}}};!function(t){b=S(t),M=b.format,b.formatPrefix}({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var C=e(0),D={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(D.arrayBuffer)var U=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],O=ArrayBuffer.isView||function(t){return t&&U.indexOf(Object.prototype.toString.call(t))>-1};function j(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function N(t){return"string"!=typeof t&&(t=String(t)),t}function P(t){var n={next:function(){var n=t.shift();return{done:void 0===n,value:n}}};return D.iterable&&(n[Symbol.iterator]=function(){return n}),n}function F(t){this.map={},t instanceof F?t.forEach(function(t,n){this.append(n,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(n){this.append(n,t[n])},this)}function H(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function I(t){return new Promise(function(n,e){t.onload=function(){n(t.result)},t.onerror=function(){e(t.error)}})}function B(t){var n=new FileReader,e=I(n);return n.readAsArrayBuffer(t),e}function L(t){if(t.slice)return t.slice(0);var n=new Uint8Array(t.byteLength);return n.set(new Uint8Array(t)),n.buffer}function q(){return this.bodyUsed=!1,this._initBody=function(t){this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:D.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:D.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:D.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():D.arrayBuffer&&D.blob&&function(t){return t&&DataView.prototype.isPrototypeOf(t)}(t)?(this._bodyArrayBuffer=L(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):D.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||O(t))?this._bodyArrayBuffer=L(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):D.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},D.blob&&(this.blob=function(){var t=H(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?H(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(B)}),this.text=function(){var t=H(this);if(t)return t;if(this._bodyBlob)return function(t){var n=new FileReader,e=I(n);return n.readAsText(t),e}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var n=new Uint8Array(t),e=new Array(n.length),r=0;r<n.length;r++)e[r]=String.fromCharCode(n[r]);return e.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},D.formData&&(this.formData=function(){return this.text().then($)}),this.json=function(){return this.text().then(JSON.parse)},this}F.prototype.append=function(t,n){t=j(t),n=N(n);var e=this.map[t];this.map[t]=e?e+", "+n:n},F.prototype.delete=function(t){delete this.map[j(t)]},F.prototype.get=function(t){return t=j(t),this.has(t)?this.map[t]:null},F.prototype.has=function(t){return this.map.hasOwnProperty(j(t))},F.prototype.set=function(t,n){this.map[j(t)]=N(n)},F.prototype.forEach=function(t,n){for(var e in this.map)this.map.hasOwnProperty(e)&&t.call(n,this.map[e],e,this)},F.prototype.keys=function(){var t=[];return this.forEach(function(n,e){t.push(e)}),P(t)},F.prototype.values=function(){var t=[];return this.forEach(function(n){t.push(n)}),P(t)},F.prototype.entries=function(){var t=[];return this.forEach(function(n,e){t.push([e,n])}),P(t)},D.iterable&&(F.prototype[Symbol.iterator]=F.prototype.entries);var Y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function R(t,n){var e=(n=n||{}).body;if(t instanceof R){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,n.headers||(this.headers=new F(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,e||null==t._bodyInit||(e=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=n.credentials||this.credentials||"same-origin",!n.headers&&this.headers||(this.headers=new F(n.headers)),this.method=function(t){var n=t.toUpperCase();return Y.indexOf(n)>-1?n:t}(n.method||this.method||"GET"),this.mode=n.mode||this.mode||null,this.signal=n.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&e)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(e)}function $(t){var n=new FormData;return t.trim().split("&").forEach(function(t){if(t){var e=t.split("="),r=e.shift().replace(/\+/g," "),o=e.join("=").replace(/\+/g," ");n.append(decodeURIComponent(r),decodeURIComponent(o))}}),n}function X(t,n){n||(n={}),this.type="default",this.status=void 0===n.status?200:n.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in n?n.statusText:"OK",this.headers=new F(n.headers),this.url=n.url||"",this._initBody(t)}R.prototype.clone=function(){return new R(this,{body:this._bodyInit})},q.call(R.prototype),q.call(X.prototype),X.prototype.clone=function(){return new X(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new F(this.headers),url:this.url})},X.error=function(){var t=new X(null,{status:0,statusText:""});return t.type="error",t};var z=[301,302,303,307,308];X.redirect=function(t,n){if(-1===z.indexOf(n))throw new RangeError("Invalid status code");return new X(null,{status:n,headers:{location:t}})};var V=self.DOMException;try{new V}catch(t){(V=function(t,n){this.message=t,this.name=n;var e=Error(t);this.stack=e.stack}).prototype=Object.create(Error.prototype),V.prototype.constructor=V}function Z(t,n){return new Promise(function(e,r){var o=new R(t,n);if(o.signal&&o.signal.aborted)return r(new V("Aborted","AbortError"));var i=new XMLHttpRequest;function a(){i.abort()}i.onload=function(){var t={status:i.status,statusText:i.statusText,headers:function(t){var n=new F;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var e=t.split(":"),r=e.shift().trim();if(r){var o=e.join(":").trim();n.append(r,o)}}),n}(i.getAllResponseHeaders()||"")};t.url="responseURL"in i?i.responseURL:t.headers.get("X-Request-URL");var n="response"in i?i.response:i.responseText;e(new X(n,t))},i.onerror=function(){r(new TypeError("Network request failed"))},i.ontimeout=function(){r(new TypeError("Network request failed"))},i.onabort=function(){r(new V("Aborted","AbortError"))},i.open(o.method,o.url,!0),"include"===o.credentials?i.withCredentials=!0:"omit"===o.credentials&&(i.withCredentials=!1),"responseType"in i&&D.blob&&(i.responseType="blob"),o.headers.forEach(function(t,n){i.setRequestHeader(n,t)}),o.signal&&(o.signal.addEventListener("abort",a),i.onreadystatechange=function(){4===i.readyState&&o.signal.removeEventListener("abort",a)}),i.send(void 0===o._bodyInit?null:o._bodyInit)})}Z.polyfill=!0,self.fetch||(self.fetch=Z,self.Headers=F,self.Request=R,self.Response=X);var G="http://www.w3.org/1999/xhtml",W={svg:"http://www.w3.org/2000/svg",xhtml:G,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Q=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),W.hasOwnProperty(n)?{space:W[n],local:t}:t};var J=function(t){var n=Q(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===G&&n.documentElement.namespaceURI===G?n.createElement(t):n.createElementNS(e,t)}})(n)};function K(){}var tt=function(t){return null==t?K:function(){return this.querySelector(t)}};function nt(){return[]}var et=function(t){return null==t?nt:function(){return this.querySelectorAll(t)}},rt=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var ot=document.documentElement;if(!ot.matches){var it=ot.webkitMatchesSelector||ot.msMatchesSelector||ot.mozMatchesSelector||ot.oMatchesSelector;rt=function(t){return function(){return it.call(this,t)}}}}var at=rt,ut=function(t){return new Array(t.length)};function ct(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}ct.prototype={constructor:ct,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var st="$";function lt(t,n,e,r,o,i){for(var a,u=0,c=n.length,s=i.length;u<s;++u)(a=n[u])?(a.__data__=i[u],r[u]=a):e[u]=new ct(t,i[u]);for(;u<c;++u)(a=n[u])&&(o[u]=a)}function ft(t,n,e,r,o,i,a){var u,c,s,l={},f=n.length,h=i.length,d=new Array(f);for(u=0;u<f;++u)(c=n[u])&&(d[u]=s=st+a.call(c,c.__data__,u,n),s in l?o[u]=c:l[s]=c);for(u=0;u<h;++u)(c=l[s=st+a.call(t,i[u],u,i)])?(r[u]=c,c.__data__=i[u],l[s]=null):e[u]=new ct(t,i[u]);for(u=0;u<f;++u)(c=n[u])&&l[d[u]]===c&&(o[u]=c)}function ht(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var dt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function pt(t,n){return t.style.getPropertyValue(n)||dt(t).getComputedStyle(t,null).getPropertyValue(n)}function yt(t){return t.trim().split(/^|\s+/)}function gt(t){return t.classList||new vt(t)}function vt(t){this._node=t,this._names=yt(t.getAttribute("class")||"")}function mt(t,n){for(var e=gt(t),r=-1,o=n.length;++r<o;)e.add(n[r])}function wt(t,n){for(var e=gt(t),r=-1,o=n.length;++r<o;)e.remove(n[r])}vt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function _t(){this.textContent=""}function bt(){this.innerHTML=""}function Mt(){this.nextSibling&&this.parentNode.appendChild(this)}function xt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function At(){return null}function Tt(){var t=this.parentNode;t&&t.removeChild(this)}function Et(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function kt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var St={},Ct=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(St={mouseenter:"mouseover",mouseleave:"mouseout"}));function Dt(t,n,e){return t=Ut(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Ut(t,n,e){return function(r){var o=Ct;Ct=r;try{t.call(this,this.__data__,n,e)}finally{Ct=o}}}function Ot(t){return function(){var n=this.__on;if(n){for(var e,r=0,o=-1,i=n.length;r<i;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++o]=e:this.removeEventListener(e.type,e.listener,e.capture);++o?n.length=o:delete this.__on}}}function jt(t,n,e){var r=St.hasOwnProperty(t.type)?Dt:Ut;return function(o,i,a){var u,c=this.__on,s=r(n,i,a);if(c)for(var l=0,f=c.length;l<f;++l)if((u=c[l]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=s,u.capture=e),void(u.value=n);this.addEventListener(t.type,s,e),u={type:t.type,name:t.name,value:n,listener:s,capture:e},c?c.push(u):this.__on=[u]}}function Nt(t,n,e){var r=dt(t),o=r.CustomEvent;"function"==typeof o?o=new o(n,e):(o=r.document.createEvent("Event"),e?(o.initEvent(n,e.bubbles,e.cancelable),o.detail=e.detail):o.initEvent(n,!1,!1)),t.dispatchEvent(o)}var Pt=[null];function Ft(t,n){this._groups=t,this._parents=n}function Ht(){return new Ft([[document.documentElement]],Pt)}Ft.prototype=Ht.prototype={constructor:Ft,select:function(t){"function"!=typeof t&&(t=tt(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var i,a,u=n[o],c=u.length,s=r[o]=new Array(c),l=0;l<c;++l)(i=u[l])&&(a=t.call(i,i.__data__,l,u))&&("__data__"in i&&(a.__data__=i.__data__),s[l]=a);return new Ft(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=et(t));for(var n=this._groups,e=n.length,r=[],o=[],i=0;i<e;++i)for(var a,u=n[i],c=u.length,s=0;s<c;++s)(a=u[s])&&(r.push(t.call(a,a.__data__,s,u)),o.push(a));return new Ft(r,o)},filter:function(t){"function"!=typeof t&&(t=at(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var i,a=n[o],u=a.length,c=r[o]=[],s=0;s<u;++s)(i=a[s])&&t.call(i,i.__data__,s,a)&&c.push(i);return new Ft(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),s=-1,this.each(function(t){d[++s]=t}),d;var e=n?ft:lt,r=this._parents,o=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var i=o.length,a=new Array(i),u=new Array(i),c=new Array(i),s=0;s<i;++s){var l=r[s],f=o[s],h=f.length,d=t.call(l,l&&l.__data__,s,r),p=d.length,y=u[s]=new Array(p),g=a[s]=new Array(p);e(l,f,y,g,c[s]=new Array(h),d,n);for(var v,m,w=0,_=0;w<p;++w)if(v=y[w]){for(w>=_&&(_=w+1);!(m=g[_])&&++_<p;);v._next=m||null}}return(a=new Ft(a,r))._enter=u,a._exit=c,a},enter:function(){return new Ft(this._enter||this._groups.map(ut),this._parents)},exit:function(){return new Ft(this._exit||this._groups.map(ut),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,o=e.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var c,s=n[u],l=e[u],f=s.length,h=a[u]=new Array(f),d=0;d<f;++d)(c=s[d]||l[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new Ft(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,o=t[n],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=ht);for(var e=this._groups,r=e.length,o=new Array(r),i=0;i<r;++i){for(var a,u=e[i],c=u.length,s=o[i]=new Array(c),l=0;l<c;++l)(a=u[l])&&(s[l]=a);s.sort(n)}return new Ft(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var o,i=n[e],a=0,u=i.length;a<u;++a)(o=i[a])&&t.call(o,o.__data__,a,i);return this},attr:function(t,n){var e=Q(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):pt(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=yt(t+"");if(arguments.length<2){for(var r=gt(this.node()),o=-1,i=e.length;++o<i;)if(!r.contains(e[o]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?mt:wt)(this,t)}}:n?function(t){return function(){mt(this,t)}}:function(t){return function(){wt(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?_t:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?bt:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(Mt)},lower:function(){return this.each(xt)},append:function(t){var n="function"==typeof t?t:J(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:J(t),r=null==n?At:"function"==typeof n?n:tt(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Tt)},clone:function(t){return this.select(t?kt:Et)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,o,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),a=i.length;if(!(arguments.length<2)){for(u=n?jt:Ot,null==e&&(e=!1),r=0;r<a;++r)this.each(u(i[r],n,e));return this}var u=this.node().__on;if(u)for(var c,s=0,l=u.length;s<l;++s)for(r=0,c=u[s];r<a;++r)if((o=i[r]).type===c.type&&o.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return Nt(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return Nt(this,t,n)}})(t,n))}};var It=Ht,Bt=function(t){return"string"==typeof t?new Ft([[document.querySelector(t)]],[document.documentElement]):new Ft([[t]],Pt)},Lt=0;function qt(){this._="@"+(++Lt).toString(36)}qt.prototype=function(){return new qt}.prototype={constructor:qt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var Yt=function(t){return"string"==typeof t?new Ft([document.querySelectorAll(t)],[document.documentElement]):new Ft([null==t?[]:t],Pt)};function Rt(){}function $t(t,n){var e=new Rt;if(t instanceof Rt)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,o=-1,i=t.length;if(null==n)for(;++o<i;)e.set(o,t[o]);else for(;++o<i;)e.set(n(r=t[o],o,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}Rt.prototype=$t.prototype={constructor:Rt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Xt=$t;function zt(){}var Vt=Xt.prototype;function Zt(t,n){var e=new zt;if(t instanceof zt)t.each(function(t){e.add(t)});else if(t){var r=-1,o=t.length;if(null==n)for(;++r<o;)e.add(t[r]);else for(;++r<o;)e.add(n(t[r],r,t))}return e}zt.prototype=Zt.prototype={constructor:zt,has:Vt.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Vt.remove,clear:Vt.clear,values:Vt.keys,size:Vt.size,empty:Vt.empty,each:Vt.each};var Gt=Array.prototype,Wt=Gt.map,Qt=Gt.slice,Jt={name:"implicit"};function Kt(t){var n=Xt(),e=[],r=Jt;function o(o){var i=o+"",a=n.get(i);if(!a){if(r!==Jt)return r;n.set(i,a=e.push(o))}return t[(a-1)%t.length]}return t=null==t?[]:Qt.call(t),o.domain=function(t){if(!arguments.length)return e.slice();e=[],n=Xt();for(var r,i,a=-1,u=t.length;++a<u;)n.has(i=(r=t[a])+"")||n.set(i,e.push(r));return o},o.range=function(n){return arguments.length?(t=Qt.call(n),o):t.slice()},o.unknown=function(t){return arguments.length?(r=t,o):r},o.copy=function(){return Kt().domain(e).range(t).unknown(r)},o}var tn=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function nn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function en(){}var rn="\\s*([+-]?\\d+)\\s*",on="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",an="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",un=/^#([0-9a-f]{3})$/,cn=/^#([0-9a-f]{6})$/,sn=new RegExp("^rgb\\("+[rn,rn,rn]+"\\)$"),ln=new RegExp("^rgb\\("+[an,an,an]+"\\)$"),fn=new RegExp("^rgba\\("+[rn,rn,rn,on]+"\\)$"),hn=new RegExp("^rgba\\("+[an,an,an,on]+"\\)$"),dn=new RegExp("^hsl\\("+[on,an,an]+"\\)$"),pn=new RegExp("^hsla\\("+[on,an,an,on]+"\\)$"),yn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function gn(t){var n;return t=(t+"").trim().toLowerCase(),(n=un.exec(t))?new bn((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=cn.exec(t))?vn(parseInt(n[1],16)):(n=sn.exec(t))?new bn(n[1],n[2],n[3],1):(n=ln.exec(t))?new bn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=fn.exec(t))?mn(n[1],n[2],n[3],n[4]):(n=hn.exec(t))?mn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=dn.exec(t))?xn(n[1],n[2]/100,n[3]/100,1):(n=pn.exec(t))?xn(n[1],n[2]/100,n[3]/100,n[4]):yn.hasOwnProperty(t)?vn(yn[t]):"transparent"===t?new bn(NaN,NaN,NaN,0):null}function vn(t){return new bn(t>>16&255,t>>8&255,255&t,1)}function mn(t,n,e,r){return r<=0&&(t=n=e=NaN),new bn(t,n,e,r)}function wn(t){return t instanceof en||(t=gn(t)),t?new bn((t=t.rgb()).r,t.g,t.b,t.opacity):new bn}function _n(t,n,e,r){return 1===arguments.length?wn(t):new bn(t,n,e,null==r?1:r)}function bn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Mn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function xn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Tn(t,n,e,r)}function An(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Tn)return new Tn(t.h,t.s,t.l,t.opacity);if(t instanceof en||(t=gn(t)),!t)return new Tn;if(t instanceof Tn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,o=Math.min(n,e,r),i=Math.max(n,e,r),a=NaN,u=i-o,c=(i+o)/2;return u?(a=n===i?(e-r)/u+6*(e<r):e===i?(r-n)/u+2:(n-e)/u+4,u/=c<.5?i+o:2-i-o,a*=60):u=c>0&&c<1?0:a,new Tn(a,u,c,t.opacity)}(t):new Tn(t,n,e,null==r?1:r)}function Tn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function En(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}tn(en,gn,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),tn(bn,_n,nn(en,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new bn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new bn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Mn(this.r)+Mn(this.g)+Mn(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),tn(Tn,An,nn(en,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Tn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Tn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,o=2*e-r;return new bn(En(t>=240?t-240:t+120,o,r),En(t,o,r),En(t<120?t+240:t-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var kn=Math.PI/180,Sn=180/Math.PI,Cn=.96422,Dn=1,Un=.82521,On=4/29,jn=6/29,Nn=3*jn*jn,Pn=jn*jn*jn;function Fn(t){if(t instanceof In)return new In(t.l,t.a,t.b,t.opacity);if(t instanceof Xn){if(isNaN(t.h))return new In(t.l,0,0,t.opacity);var n=t.h*kn;return new In(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof bn||(t=wn(t));var e,r,o=Yn(t.r),i=Yn(t.g),a=Yn(t.b),u=Bn((.2225045*o+.7168786*i+.0606169*a)/Dn);return o===i&&i===a?e=r=u:(e=Bn((.4360747*o+.3850649*i+.1430804*a)/Cn),r=Bn((.0139322*o+.0971045*i+.7141733*a)/Un)),new In(116*u-16,500*(e-u),200*(u-r),t.opacity)}function Hn(t,n,e,r){return 1===arguments.length?Fn(t):new In(t,n,e,null==r?1:r)}function In(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Bn(t){return t>Pn?Math.pow(t,1/3):t/Nn+On}function Ln(t){return t>jn?t*t*t:Nn*(t-On)}function qn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Yn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Rn(t){if(t instanceof Xn)return new Xn(t.h,t.c,t.l,t.opacity);if(t instanceof In||(t=Fn(t)),0===t.a&&0===t.b)return new Xn(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Sn;return new Xn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function $n(t,n,e,r){return 1===arguments.length?Rn(t):new Xn(t,n,e,null==r?1:r)}function Xn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}tn(In,Hn,nn(en,{brighter:function(t){return new In(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new In(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new bn(qn(3.1338561*(n=Cn*Ln(n))-1.6168667*(t=Dn*Ln(t))-.4906146*(e=Un*Ln(e))),qn(-.9787684*n+1.9161415*t+.033454*e),qn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),tn(Xn,$n,nn(en,{brighter:function(t){return new Xn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Xn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Fn(this).rgb()}}));var zn=-.14861,Vn=1.78277,Zn=-.29227,Gn=-.90649,Wn=1.97294,Qn=Wn*Gn,Jn=Wn*Vn,Kn=Vn*Zn-Gn*zn;function te(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof ne)return new ne(t.h,t.s,t.l,t.opacity);t instanceof bn||(t=wn(t));var n=t.r/255,e=t.g/255,r=t.b/255,o=(Kn*r+Qn*n-Jn*e)/(Kn+Qn-Jn),i=r-o,a=(Wn*(e-o)-Zn*i)/Gn,u=Math.sqrt(a*a+i*i)/(Wn*o*(1-o)),c=u?Math.atan2(a,i)*Sn-120:NaN;return new ne(c<0?c+360:c,u,o,t.opacity)}(t):new ne(t,n,e,null==r?1:r)}function ne(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ee(t,n,e,r,o){var i=t*t,a=i*t;return((1-3*t+3*i-a)*n+(4-6*i+3*a)*e+(1+3*t+3*i-3*a)*r+a*o)/6}tn(ne,te,nn(en,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ne(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ne(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*kn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),o=Math.sin(t);return new bn(255*(n+e*(zn*r+Vn*o)),255*(n+e*(Zn*r+Gn*o)),255*(n+e*(Wn*r)),this.opacity)}}));var re=function(t){return function(){return t}};function oe(t,n){return function(e){return t+e*n}}function ie(t,n){var e=n-t;return e?oe(t,e>180||e<-180?e-360*Math.round(e/360):e):re(isNaN(t)?n:t)}function ae(t){return 1==(t=+t)?ue:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):re(isNaN(n)?e:n)}}function ue(t,n){var e=n-t;return e?oe(t,e):re(isNaN(t)?n:t)}var ce=function t(n){var e=ae(n);function r(t,n){var r=e((t=_n(t)).r,(n=_n(n)).r),o=e(t.g,n.g),i=e(t.b,n.b),a=ue(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=o(n),t.b=i(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function se(t){return function(n){var e,r,o=n.length,i=new Array(o),a=new Array(o),u=new Array(o);for(e=0;e<o;++e)r=_n(n[e]),i[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return i=t(i),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=i(t),r.g=a(t),r.b=u(t),r+""}}}se(function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),o=t[r],i=t[r+1],a=r>0?t[r-1]:2*o-i,u=r<n-1?t[r+2]:2*i-o;return ee((e-r/n)*n,a,o,i,u)}}),se(function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),o=t[(r+n-1)%n],i=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return ee((e-r/n)*n,o,i,a,u)}});var le=function(t,n){return n-=t=+t,function(e){return t+n*e}},fe=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,he=new RegExp(fe.source,"g");var de,pe,ye,ge,ve=function(t,n){var e,r,o,i=fe.lastIndex=he.lastIndex=0,a=-1,u=[],c=[];for(t+="",n+="";(e=fe.exec(t))&&(r=he.exec(n));)(o=r.index)>i&&(o=n.slice(i,o),u[a]?u[a]+=o:u[++a]=o),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,c.push({i:a,x:le(e,r)})),i=he.lastIndex;return i<n.length&&(o=n.slice(i),u[a]?u[a]+=o:u[++a]=o),u.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)u[(e=c[r]).i]=e.x(t);return u.join("")})},me=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?re(n):("number"===r?le:"string"===r?(e=gn(n))?(n=e,ce):ve:n instanceof gn?ce:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,o=t?Math.min(r,t.length):0,i=new Array(o),a=new Array(r);for(e=0;e<o;++e)i[e]=me(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<o;++e)a[e]=i[e](t);return a}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},o={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=me(t[e],n[e]):o[e]=n[e];return function(t){for(e in r)o[e]=r[e](t);return o}}:le)(t,n)},we=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},_e=180/Math.PI,be={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Me=function(t,n,e,r,o,i){var a,u,c;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,c/=u),t*r<n*e&&(t=-t,n=-n,c=-c,a=-a),{translateX:o,translateY:i,rotate:Math.atan2(n,t)*_e,skewX:Math.atan(c)*_e,scaleX:a,scaleY:u}};function xe(t,n,e,r){function o(t){return t.length?t.pop()+" ":""}return function(i,a){var u=[],c=[];return i=t(i),a=t(a),function(t,r,o,i,a,u){if(t!==o||r!==i){var c=a.push("translate(",null,n,null,e);u.push({i:c-4,x:le(t,o)},{i:c-2,x:le(r,i)})}else(o||i)&&a.push("translate("+o+n+i+e)}(i.translateX,i.translateY,a.translateX,a.translateY,u,c),function(t,n,e,i){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),i.push({i:e.push(o(e)+"rotate(",null,r)-2,x:le(t,n)})):n&&e.push(o(e)+"rotate("+n+r)}(i.rotate,a.rotate,u,c),function(t,n,e,i){t!==n?i.push({i:e.push(o(e)+"skewX(",null,r)-2,x:le(t,n)}):n&&e.push(o(e)+"skewX("+n+r)}(i.skewX,a.skewX,u,c),function(t,n,e,r,i,a){if(t!==e||n!==r){var u=i.push(o(i)+"scale(",null,",",null,")");a.push({i:u-4,x:le(t,e)},{i:u-2,x:le(n,r)})}else 1===e&&1===r||i.push(o(i)+"scale("+e+","+r+")")}(i.scaleX,i.scaleY,a.scaleX,a.scaleY,u,c),i=a=null,function(t){for(var n,e=-1,r=c.length;++e<r;)u[(n=c[e]).i]=n.x(t);return u.join("")}}}var Ae=xe(function(t){return"none"===t?be:(de||(de=document.createElement("DIV"),pe=document.documentElement,ye=document.defaultView),de.style.transform=t,t=ye.getComputedStyle(pe.appendChild(de),null).getPropertyValue("transform"),pe.removeChild(de),t=t.slice(7,-1).split(","),Me(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Te=xe(function(t){return null==t?be:(ge||(ge=document.createElementNS("http://www.w3.org/2000/svg","g")),ge.setAttribute("transform",t),(t=ge.transform.baseVal.consolidate())?(t=t.matrix,Me(t.a,t.b,t.c,t.d,t.e,t.f)):be)},", ",")",")");Math.SQRT2;function Ee(t){return function(n,e){var r=t((n=An(n)).h,(e=An(e)).h),o=ue(n.s,e.s),i=ue(n.l,e.l),a=ue(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=o(t),n.l=i(t),n.opacity=a(t),n+""}}}Ee(ie),Ee(ue);function ke(t){return function(n,e){var r=t((n=$n(n)).h,(e=$n(e)).h),o=ue(n.c,e.c),i=ue(n.l,e.l),a=ue(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=o(t),n.l=i(t),n.opacity=a(t),n+""}}}ke(ie),ke(ue);function Se(t){return function n(e){function r(n,r){var o=t((n=te(n)).h,(r=te(r)).h),i=ue(n.s,r.s),a=ue(n.l,r.l),u=ue(n.opacity,r.opacity);return function(t){return n.h=o(t),n.s=i(t),n.l=a(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}Se(ie),Se(ue);var Ce=function(t){return function(){return t}},De=function(t){return+t},Ue=[0,1];function Oe(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:Ce(n)}function je(t,n,e,r){var o=t[0],i=t[1],a=n[0],u=n[1];return i<o?(o=e(i,o),a=r(u,a)):(o=e(o,i),a=r(a,u)),function(t){return a(o(t))}}function Ne(t,n,e,r){var o=Math.min(t.length,n.length)-1,i=new Array(o),a=new Array(o),c=-1;for(t[o]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++c<o;)i[c]=e(t[c],t[c+1]),a[c]=r(n[c],n[c+1]);return function(n){var e=u(t,n,1,o)-1;return a[e](i[e](n))}}function Pe(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function Fe(t,n){var e,r,o,i=Ue,a=Ue,u=me,c=!1;function s(){return e=Math.min(i.length,a.length)>2?Ne:je,r=o=null,l}function l(n){return(r||(r=e(i,a,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,u)))(+n)}return l.invert=function(t){return(o||(o=e(a,i,Oe,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},l.domain=function(t){return arguments.length?(i=Wt.call(t,De),s()):i.slice()},l.range=function(t){return arguments.length?(a=Qt.call(t),s()):a.slice()},l.rangeRound=function(t){return a=Qt.call(t),u=we,s()},l.clamp=function(t){return arguments.length?(c=!!t,s()):c},l.interpolate=function(t){return arguments.length?(u=t,s()):u},s()}var He=function(t,n){var e,r=0,o=(t=t.slice()).length-1,i=t[r],a=t[o];return a<i&&(e=r,r=o,o=e,e=i,i=a,a=e),t[r]=n.floor(i),t[o]=n.ceil(a),t};function Ie(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:Ce(n)}function Be(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function Le(t){return isFinite(t)?+("1e"+t):t<0?0:t}function qe(t){return 10===t?Le:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function Ye(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function Re(t){return function(n){return-t(-n)}}function $e(){var t=Fe(Ie,Be).domain([1,10]),n=t.domain,e=10,r=Ye(10),o=qe(10);function i(){return r=Ye(e),o=qe(e),n()[0]<0&&(r=Re(r),o=Re(o)),t}return t.base=function(t){return arguments.length?(e=+t,i()):e},t.domain=function(t){return arguments.length?(n(t),i()):n()},t.ticks=function(t){var i,a=n(),u=a[0],c=a[a.length-1];(i=c<u)&&(h=u,u=c,c=h);var s,l,f,h=r(u),p=r(c),y=null==t?10:+t,g=[];if(!(e%1)&&p-h<y){if(h=Math.round(h)-1,p=Math.round(p)+1,u>0){for(;h<p;++h)for(l=1,s=o(h);l<e;++l)if(!((f=s*l)<u)){if(f>c)break;g.push(f)}}else for(;h<p;++h)for(l=e-1,s=o(h);l>=1;--l)if(!((f=s*l)<u)){if(f>c)break;g.push(f)}}else g=d(h,p,Math.min(p-h,y)).map(o);return i?g.reverse():g},t.tickFormat=function(n,i){if(null==i&&(i=10===e?".0e":","),"function"!=typeof i&&(i=M(i)),n===1/0)return i;null==n&&(n=10);var a=Math.max(1,e*n/t.ticks().length);return function(t){var n=t/o(Math.round(r(t)));return n*e<e-.5&&(n*=e),n<=a?i(t):""}},t.nice=function(){return n(He(n(),{floor:function(t){return o(Math.floor(r(t)))},ceil:function(t){return o(Math.ceil(r(t)))}}))},t.copy=function(){return Pe(t,$e().base(e))},t}var Xe=new Date,ze=new Date;function Ve(t,n,e,r){function o(n){return t(n=new Date(+n)),n}return o.floor=o,o.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},o.round=function(t){var n=o(t),e=o.ceil(t);return t-n<e-t?n:e},o.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},o.range=function(e,r,i){var a,u=[];if(e=o.ceil(e),i=null==i?1:Math.floor(i),!(e<r&&i>0))return u;do{u.push(a=new Date(+e)),n(e,i),t(e)}while(a<e&&e<r);return u},o.filter=function(e){return Ve(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(o.count=function(n,r){return Xe.setTime(+n),ze.setTime(+r),t(Xe),t(ze),Math.floor(e(Xe,ze))},o.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?o.filter(r?function(n){return r(n)%t==0}:function(n){return o.count(0,n)%t==0}):o:null}),o}var Ze=Ve(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});Ze.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ve(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):Ze:null};Ze.range;var Ge=6e4,We=6048e5,Qe=Ve(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),Je=(Qe.range,Ve(function(t){t.setTime(Math.floor(t/Ge)*Ge)},function(t,n){t.setTime(+t+n*Ge)},function(t,n){return(n-t)/Ge},function(t){return t.getMinutes()})),Ke=(Je.range,Ve(function(t){var n=t.getTimezoneOffset()*Ge%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),tr=(Ke.range,Ve(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Ge)/864e5},function(t){return t.getDate()-1})),nr=tr;tr.range;function er(t){return Ve(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Ge)/We})}var rr=er(0),or=er(1),ir=er(2),ar=er(3),ur=er(4),cr=er(5),sr=er(6),lr=(rr.range,or.range,ir.range,ar.range,ur.range,cr.range,sr.range,Ve(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),fr=(lr.range,Ve(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));fr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ve(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var hr=fr,dr=(fr.range,Ve(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Ge)},function(t,n){return(n-t)/Ge},function(t){return t.getUTCMinutes()})),pr=(dr.range,Ve(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),yr=(pr.range,Ve(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),gr=yr;yr.range;function vr(t){return Ve(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/We})}var mr=vr(0),wr=vr(1),_r=vr(2),br=vr(3),Mr=vr(4),xr=vr(5),Ar=vr(6),Tr=(mr.range,wr.range,_r.range,br.range,Mr.range,xr.range,Ar.range,Ve(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),Er=(Tr.range,Ve(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));Er.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ve(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var kr=Er;Er.range;function Sr(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Cr(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Dr(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var Ur,Or,jr,Nr={"-":"",_:" ",0:"0"},Pr=/^\s*\d+/,Fr=/^%/,Hr=/[\\^$*+?|[\]().{}]/g;function Ir(t,n,e){var r=t<0?"-":"",o=(r?-t:t)+"",i=o.length;return r+(i<e?new Array(e-i+1).join(n)+o:o)}function Br(t){return t.replace(Hr,"\\$&")}function Lr(t){return new RegExp("^(?:"+t.map(Br).join("|")+")","i")}function qr(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Yr(t,n,e){var r=Pr.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Rr(t,n,e){var r=Pr.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function $r(t,n,e){var r=Pr.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Xr(t,n,e){var r=Pr.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function zr(t,n,e){var r=Pr.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Vr(t,n,e){var r=Pr.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Zr(t,n,e){var r=Pr.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Gr(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Wr(t,n,e){var r=Pr.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Qr(t,n,e){var r=Pr.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Jr(t,n,e){var r=Pr.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Kr(t,n,e){var r=Pr.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function to(t,n,e){var r=Pr.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function no(t,n,e){var r=Pr.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function eo(t,n,e){var r=Pr.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function ro(t,n,e){var r=Pr.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function oo(t,n,e){var r=Fr.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function io(t,n,e){var r=Pr.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function ao(t,n,e){var r=Pr.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function uo(t,n){return Ir(t.getDate(),n,2)}function co(t,n){return Ir(t.getHours(),n,2)}function so(t,n){return Ir(t.getHours()%12||12,n,2)}function lo(t,n){return Ir(1+nr.count(hr(t),t),n,3)}function fo(t,n){return Ir(t.getMilliseconds(),n,3)}function ho(t,n){return fo(t,n)+"000"}function po(t,n){return Ir(t.getMonth()+1,n,2)}function yo(t,n){return Ir(t.getMinutes(),n,2)}function go(t,n){return Ir(t.getSeconds(),n,2)}function vo(t){var n=t.getDay();return 0===n?7:n}function mo(t,n){return Ir(rr.count(hr(t),t),n,2)}function wo(t,n){var e=t.getDay();return t=e>=4||0===e?ur(t):ur.ceil(t),Ir(ur.count(hr(t),t)+(4===hr(t).getDay()),n,2)}function _o(t){return t.getDay()}function bo(t,n){return Ir(or.count(hr(t),t),n,2)}function Mo(t,n){return Ir(t.getFullYear()%100,n,2)}function xo(t,n){return Ir(t.getFullYear()%1e4,n,4)}function Ao(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Ir(n/60|0,"0",2)+Ir(n%60,"0",2)}function To(t,n){return Ir(t.getUTCDate(),n,2)}function Eo(t,n){return Ir(t.getUTCHours(),n,2)}function ko(t,n){return Ir(t.getUTCHours()%12||12,n,2)}function So(t,n){return Ir(1+gr.count(kr(t),t),n,3)}function Co(t,n){return Ir(t.getUTCMilliseconds(),n,3)}function Do(t,n){return Co(t,n)+"000"}function Uo(t,n){return Ir(t.getUTCMonth()+1,n,2)}function Oo(t,n){return Ir(t.getUTCMinutes(),n,2)}function jo(t,n){return Ir(t.getUTCSeconds(),n,2)}function No(t){var n=t.getUTCDay();return 0===n?7:n}function Po(t,n){return Ir(mr.count(kr(t),t),n,2)}function Fo(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Mr(t):Mr.ceil(t),Ir(Mr.count(kr(t),t)+(4===kr(t).getUTCDay()),n,2)}function Ho(t){return t.getUTCDay()}function Io(t,n){return Ir(wr.count(kr(t),t),n,2)}function Bo(t,n){return Ir(t.getUTCFullYear()%100,n,2)}function Lo(t,n){return Ir(t.getUTCFullYear()%1e4,n,4)}function qo(){return"+0000"}function Yo(){return"%"}function Ro(t){return+t}function $o(t){return Math.floor(+t/1e3)}!function(t){Ur=function(t){var n=t.dateTime,e=t.date,r=t.time,o=t.periods,i=t.days,a=t.shortDays,u=t.months,c=t.shortMonths,s=Lr(o),l=qr(o),f=Lr(i),h=qr(i),d=Lr(a),p=qr(a),y=Lr(u),g=qr(u),v=Lr(c),m=qr(c),w={a:function(t){return a[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:uo,e:uo,f:ho,H:co,I:so,j:lo,L:fo,m:po,M:yo,p:function(t){return o[+(t.getHours()>=12)]},Q:Ro,s:$o,S:go,u:vo,U:mo,V:wo,w:_o,W:bo,x:null,X:null,y:Mo,Y:xo,Z:Ao,"%":Yo},_={a:function(t){return a[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:To,e:To,f:Do,H:Eo,I:ko,j:So,L:Co,m:Uo,M:Oo,p:function(t){return o[+(t.getUTCHours()>=12)]},Q:Ro,s:$o,S:jo,u:No,U:Po,V:Fo,w:Ho,W:Io,x:null,X:null,y:Bo,Y:Lo,Z:qo,"%":Yo},b={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return A(t,n,e,r)},d:Qr,e:Qr,f:ro,H:Kr,I:Kr,j:Jr,L:eo,m:Wr,M:to,p:function(t,n,e){var r=s.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},Q:io,s:ao,S:no,u:Rr,U:$r,V:Xr,w:Yr,W:zr,x:function(t,n,r){return A(t,e,n,r)},X:function(t,n,e){return A(t,r,n,e)},y:Zr,Y:Vr,Z:Gr,"%":oo};function M(t,n){return function(e){var r,o,i,a=[],u=-1,c=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++u<s;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(o=Nr[r=t.charAt(++u)])?r=t.charAt(++u):o="e"===r?" ":"0",(i=n[r])&&(r=i(e,o)),a.push(r),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function x(t,n){return function(e){var r,o,i=Dr(1900);if(A(i,t,e+="",0)!=e.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(o=(r=Cr(Dr(i.y))).getUTCDay())>4||0===o?wr.ceil(r):wr(r),r=gr.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(r=(o=(r=n(Dr(i.y))).getDay())>4||0===o?or.ceil(r):or(r),r=nr.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),o="Z"in i?Cr(Dr(i.y)).getUTCDay():n(Dr(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Cr(i)):n(i)}}function A(t,n,e,r){for(var o,i,a=0,u=n.length,c=e.length;a<u;){if(r>=c)return-1;if(37===(o=n.charCodeAt(a++))){if(o=n.charAt(a++),!(i=b[o in Nr?n.charAt(a++):o])||(r=i(t,e,r))<0)return-1}else if(o!=e.charCodeAt(r++))return-1}return r}return w.x=M(e,w),w.X=M(r,w),w.c=M(n,w),_.x=M(e,_),_.X=M(r,_),_.c=M(n,_),{format:function(t){var n=M(t+="",w);return n.toString=function(){return t},n},parse:function(t){var n=x(t+="",Sr);return n.toString=function(){return t},n},utcFormat:function(t){var n=M(t+="",_);return n.toString=function(){return t},n},utcParse:function(t){var n=x(t,Cr);return n.toString=function(){return t},n}}}(t),Ur.format,Ur.parse,Or=Ur.utcFormat,jr=Ur.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Or("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||jr("%Y-%m-%dT%H:%M:%S.%LZ");var Xo={value:function(){}};function zo(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Vo(r)}function Vo(t){this._=t}function Zo(t,n){for(var e,r=0,o=t.length;r<o;++r)if((e=t[r]).name===n)return e.value}function Go(t,n,e){for(var r=0,o=t.length;r<o;++r)if(t[r].name===n){t[r]=Xo,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}Vo.prototype=zo.prototype={constructor:Vo,on:function(t,n){var e,r=this._,o=function(t,n){return t.trim().split(/^|\s+/).map(function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})}(t+"",r),i=-1,a=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++i<a;)if(e=(t=o[i]).type)r[e]=Go(r[e],t.name,n);else if(null==n)for(e in r)r[e]=Go(r[e],t.name,null);return this}for(;++i<a;)if((e=(t=o[i]).type)&&(e=Zo(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new Vo(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,o=new Array(e),i=0;i<e;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,e=(r=this._[t]).length;i<e;++i)r[i].value.apply(n,o)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,i=r.length;o<i;++o)r[o].value.apply(n,e)}};var Wo,Qo,Jo=zo,Ko=0,ti=0,ni=0,ei=1e3,ri=0,oi=0,ii=0,ai="object"==typeof performance&&performance.now?performance:Date,ui="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ci(){return oi||(ui(si),oi=ai.now()+ii)}function si(){oi=0}function li(){this._call=this._time=this._next=null}function fi(t,n,e){var r=new li;return r.restart(t,n,e),r}function hi(){oi=(ri=ai.now())+ii,Ko=ti=0;try{!function(){ci(),++Ko;for(var t,n=Wo;n;)(t=oi-n._time)>=0&&n._call.call(null,t),n=n._next;--Ko}()}finally{Ko=0,function(){var t,n,e=Wo,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Wo=n);Qo=t,pi(r)}(),oi=0}}function di(){var t=ai.now(),n=t-ri;n>ei&&(ii-=n,ri=t)}function pi(t){Ko||(ti&&(ti=clearTimeout(ti)),t-oi>24?(t<1/0&&(ti=setTimeout(hi,t-ai.now()-ii)),ni&&(ni=clearInterval(ni))):(ni||(ri=ai.now(),ni=setInterval(di,ei)),Ko=1,ui(hi)))}li.prototype=fi.prototype={constructor:li,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?ci():+e)+(null==n?0:+n),this._next||Qo===this||(Qo?Qo._next=this:Wo=this,Qo=this),this._call=t,this._time=e,pi()},stop:function(){this._call&&(this._call=null,this._time=1/0,pi())}};var yi=function(t,n,e){var r=new li;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},gi=Jo("start","end","interrupt"),vi=[],mi=0,wi=1,_i=2,bi=3,Mi=4,xi=5,Ai=6,Ti=function(t,n,e,r,o,i){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,o=t.__transition;function i(c){var s,l,f,h;if(e.state!==wi)return u();for(s in o)if((h=o[s]).name===e.name){if(h.state===bi)return yi(i);h.state===Mi?(h.state=Ai,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete o[s]):+s<n&&(h.state=Ai,h.timer.stop(),delete o[s])}if(yi(function(){e.state===bi&&(e.state=Mi,e.timer.restart(a,e.delay,e.time),a(c))}),e.state=_i,e.on.call("start",t,t.__data__,e.index,e.group),e.state===_i){for(e.state=bi,r=new Array(f=e.tween.length),s=0,l=-1;s<f;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function a(n){for(var o=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=xi,1),i=-1,a=r.length;++i<a;)r[i].call(null,o);e.state===xi&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=Ai,e.timer.stop(),delete o[n],o)return;delete t.__transition}o[n]=e,e.timer=fi(function(t){e.state=wi,e.timer.restart(i,e.delay,e.time),e.delay<=t&&i(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:o,on:gi,tween:vi,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:mi})};function Ei(t,n){var e=Si(t,n);if(e.state>mi)throw new Error("too late; already scheduled");return e}function ki(t,n){var e=Si(t,n);if(e.state>_i)throw new Error("too late; already started");return e}function Si(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Ci(t,n,e){var r=t._id;return t.each(function(){var t=ki(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return Si(t,r).value[n]}}var Di=function(t,n){var e;return("number"==typeof n?le:n instanceof gn?ce:(e=gn(n))?(n=e,ce):ve)(t,n)};var Ui=It.prototype.constructor;var Oi=0;function ji(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Ni(){return++Oi}var Pi=It.prototype;ji.prototype=function(t){return It().transition(t)}.prototype={constructor:ji,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=tt(t));for(var r=this._groups,o=r.length,i=new Array(o),a=0;a<o;++a)for(var u,c,s=r[a],l=s.length,f=i[a]=new Array(l),h=0;h<l;++h)(u=s[h])&&(c=t.call(u,u.__data__,h,s))&&("__data__"in u&&(c.__data__=u.__data__),f[h]=c,Ti(f[h],n,e,h,f,Si(u,e)));return new ji(i,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=et(t));for(var r=this._groups,o=r.length,i=[],a=[],u=0;u<o;++u)for(var c,s=r[u],l=s.length,f=0;f<l;++f)if(c=s[f]){for(var h,d=t.call(c,c.__data__,f,s),p=Si(c,e),y=0,g=d.length;y<g;++y)(h=d[y])&&Ti(h,n,e,y,d,p);i.push(d),a.push(c)}return new ji(i,a,n,e)},filter:function(t){"function"!=typeof t&&(t=at(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var i,a=n[o],u=a.length,c=r[o]=[],s=0;s<u;++s)(i=a[s])&&t.call(i,i.__data__,s,a)&&c.push(i);return new ji(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,o=e.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var c,s=n[u],l=e[u],f=s.length,h=a[u]=new Array(f),d=0;d<f;++d)(c=s[d]||l[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new ji(a,this._parents,this._name,this._id)},selection:function(){return new Ui(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Ni(),r=this._groups,o=r.length,i=0;i<o;++i)for(var a,u=r[i],c=u.length,s=0;s<c;++s)if(a=u[s]){var l=Si(a,n);Ti(a,t,e,s,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new ji(r,this._parents,t,e)},call:Pi.call,nodes:Pi.nodes,node:Pi.node,size:Pi.size,empty:Pi.empty,each:Pi.each,on:function(t,n){var e=this._id;return arguments.length<2?Si(this.node(),e).on.on(t):this.each(function(t,n,e){var r,o,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?Ei:ki;return function(){var a=i(this,t),u=a.on;u!==r&&(o=(r=u).copy()).on(n,e),a.on=o}}(e,t,n))},attr:function(t,n){var e=Q(t),r="transform"===e?Te:Di;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,o,i;return function(){var a,u=e(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===u?null:a===r&&u===o?i:i=n(r=a,o=u);this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,o,i;return function(){var a,u=e(this);if(null!=u)return(a=this.getAttribute(t))===u?null:a===r&&u===o?i:i=n(r=a,o=u);this.removeAttribute(t)}})(e,r,Ci(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,o;return function(){var i=this.getAttributeNS(t.space,t.local);return i===e?null:i===r?o:o=n(r=i,e)}}:function(t,n,e){var r,o;return function(){var i=this.getAttribute(t);return i===e?null:i===r?o:o=n(r=i,e)}})(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Q(t);return this.tween(e,(r.local?function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}:function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Ae:Di;return null==n?this.styleTween(t,function(t,n){var e,r,o;return function(){var i=pt(this,t),a=(this.style.removeProperty(t),pt(this,t));return i===a?null:i===e&&a===r?o:o=n(e=i,r=a)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,o,i;return function(){var a=pt(this,t),u=e(this);return null==u&&(this.style.removeProperty(t),u=pt(this,t)),a===u?null:a===r&&u===o?i:i=n(r=a,o=u)}}(t,r,Ci(this,"style."+t,n)):function(t,n,e){var r,o;return function(){var i=pt(this,t);return i===e?null:i===r?o:o=n(r=i,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){function r(){var r=this,o=n.apply(r,arguments);return o&&function(n){r.style.setProperty(t,o(n),e)}}return r._value=n,r}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Ci(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,o=Si(this.node(),e).tween,i=0,a=o.length;i<a;++i)if((r=o[i]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var o=ki(this,t),i=o.tween;if(i!==e)for(var a=0,u=(r=e=i).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}o.tween=r}}:function(t,n,e){var r,o;if("function"!=typeof e)throw new Error;return function(){var i=ki(this,t),a=i.tween;if(a!==r){o=(r=a).slice();for(var u={name:n,value:e},c=0,s=o.length;c<s;++c)if(o[c].name===n){o[c]=u;break}c===s&&o.push(u)}i.tween=o}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Ei(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Ei(this,t).delay=n}})(n,t)):Si(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){ki(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){ki(this,t).duration=n}})(n,t)):Si(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){ki(this,t).ease=n}}(n,t)):Si(this.node(),n).ease}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var Fi=2*Math.PI,Hi=(function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Fi);function o(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return o.amplitude=function(n){return t(n,e*Fi)},o.period=function(e){return t(n,e)},o}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Fi);function o(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return o.amplitude=function(n){return t(n,e*Fi)},o.period=function(e){return t(n,e)},o}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Fi);function o(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return o.amplitude=function(n){return t(n,e*Fi)},o.period=function(e){return t(n,e)},o}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function Ii(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Hi.time=ci(),Hi;return e}It.prototype.interrupt=function(t){return this.each(function(){!function(t,n){var e,r,o,i=t.__transition,a=!0;if(i){for(o in n=null==n?null:n+"",i)(e=i[o]).name===n?(r=e.state>_i&&e.state<xi,e.state=Ai,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete i[o]):a=!1;a&&delete t.__transition}}(this,t)})},It.prototype.transition=function(t){var n,e;t instanceof ji?(n=t._id,t=t._name):(n=Ni(),(e=Hi).time=ci(),t=null==t?null:t+"");for(var r=this._groups,o=r.length,i=0;i<o;++i)for(var a,u=r[i],c=u.length,s=0;s<c;++s)(a=u[s])&&Ti(a,t,n,s,u,e||Ii(a,n));return new ji(r,this._parents,t,n)};var Bi=Bt(".tooltip"),Li={show:function(t){var n=Ct.pageY,e=Ct.pageX;e+10>document.body.clientWidth-215&&(e=document.body.clientWidth+5-215),Bi.transition().duration(200).style("opacity",.9).on("end",function(){Bi.classed("isActive",!0),Bi.on("click",this.hide)}),Bi.html(t).style("visibility","visible").style("left",e+"px").style("top",n+"px")},hide:function(){Bi.transition().duration(500).style("opacity",0)},formatContent:function(t){var n='<ul class="tooltip-list">';return t.forEach(function(t,e){var r=null;t.class&&(r=t.class);var o=Object.keys(t)[0];n+='<li class="'.concat(r,'"><span class="tooltip-label">').concat(o,":</span> ").concat(t[o],"</li>")}),n+="</ul>"}};function qi(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Yi,Ri,$i,Xi,zi,Vi,Zi,Gi,Wi=M(".3s"),Qi=M(".2f"),Ji=["canada","china","eu","mexico"],Ki=["#9EB040","#FE5000","#0AA4CF","#F2AF19","#fff"],ta={top:10,right:5,bottom:10,left:5},na=Bt(".chart"),ea=8,ra=11,oa=12,ia=48,aa=Ji,ua=[];function ca(t){function n(){Ri=n.width(),$i=.8*n.width(),Xi=function(t,n,e,r){var o,i=t-2,a=n-2,u=Math.floor(i/e),c=Math.floor(a/r);o=u<=c?u:c;return o}(Ri-ra*oa-ta.right-ta.left,$i-ra*oa-ta.top-ta.bottom,ra,ea);!function(t,n,e){for(var r=[],o=1,i=1,a=e,u=0;u<n;u++){r.push([]);for(var c=0;c<t;c++)r[u].push({x:o,y:i,width:a,height:a}),o+=a;o=1,i+=a}}(ra,ea,Xi);var r=document.querySelectorAll(".map").length?na.selectAll(".map"):Bt(".chart").append("svg");r.attr("width",Ri+ta.left+ta.right).attr("height",$i+ta.top+ta.bottom).attr("class","map").attr("viewBox","0 0 "+(Ri+ta.left+ta.right)+" "+($i+ta.top+ta.bottom)),Yt("input").on("click",e.key.click);var o=document.querySelectorAll(".gridmap").length?na.selectAll(".gridmap"):r.append("g").attr("class","gridmap"),i=document.querySelectorAll(".group").length?o.selectAll(".group"):o.selectAll(".group").data(t).enter().append("g").attr("class",function(t){return"group "+t.code});i.data(t).attr("x",function(t){return(t.col-1)*Xi+oa*t.col}).attr("y",function(t){return(t.row-1)*Xi+oa*t.row}),'"xsmall"'!==getComputedStyle(document.body).getPropertyValue("--breakpoint")&&o.selectAll(".group").on("mouseover",e.states.mouseover).on("mouseleave",e.states.mouseleave),i.each(function(t,n,e){(document.querySelector(".state.".concat(t.code))?Bt(e[n]).selectAll(".state.".concat(t.code)):Bt(e[n]).selectAll(".state").data([t]).enter().append("rect").attr("class",function(t){return"state "+t.code})).attr("fill","#fff").attr("stroke",function(t){return Vi(t.totaldollars)}).attr("stroke-width",function(t){return Zi(t.totaldollars)}).attr("x",function(t){return(t.col-1)*Xi+oa*t.col}).attr("y",function(t){return(t.row-1)*Xi+oa*t.row}).attr("width",Xi+2).attr("height",Xi+2)})}Vi=$e().domain(c(t,function(t){return+t.totaldollars})).range(["#E5E5E5","#5E5E5E"]),Zi=$e().domain(c(t,function(t){return+t.totaldollars})).range(["1","5"]),Gi=Kt().domain(Ji.concat(["other"])).range(Ki),n.width=function(){if(!arguments.length)return Ri;Ri=(arguments.length<=0?void 0:arguments[0])-ta.left-ta.right},n.height=function(){if(!arguments.length)return $i;$i=(arguments.length<=0?void 0:arguments[0])-ta.top-ta.bottom};var e={key:{click:function(t){Bt(".stateModal").remove();var n=["legend-label","active","other","all"],e=this.classList,r=e.contains("all"),o=this.checked,i=(Bt("input.all").node().checked,qi(e).find(function(t){return!(n.indexOf(t)>-1)})),a=Bt("input.all").node();i&&aa.indexOf(i)>-1?(aa=aa.filter(function(t){return t!==i}),a.checked=!1):i&&aa.unshift(i),4!==aa.length?a.checked=!1:Bt("input.all").node().checked=!0,r&&o?(aa=Ji,Yt("input").each(function(t,n,e){e[n].checked=!0})):r&&!o&&(aa=[],Yt("input").each(function(t,n,e){e[n].checked=!1})),na.call(Yi.drawPercents)}},states:{mouseover:function(t){e.states.showTooltip(t)},mouseleave:function(t){Li.hide()},click:function(t){Li.hide(),zi=t,na.call(Yi.drawState,t)},showTooltip:function(t){var n='\n        <p class="tooltip-heading">\n          '.concat(t.state,'\n        </p>\n        <p class="tooltip-body">\n          $').concat(Wi(t.totaldollars).replace(/G/,"B"),' Total Trade (2017)\n        </p>\n        <ul class="tooltip-list">\n        ').concat(Ji.map(function(n){return'<li class="'.concat(n,'">').concat(n.charAt(0).toUpperCase()+n.slice(1),": ").concat(t[n]?Qi(t[n]):0,"%</li>")}).join(""),'\n\n        </ul>\n        <p class="tooltip-footer">\n          ').concat(Qi(t.grandtotal),"% of Total (2017)\n        </p>\n        ");Li.show(n)}}};return{drawGridMap:n,drawPercents:function(){Gi=Kt().domain(Ji.concat(["other"])).range(Ki.map(function(t,n){var e=[];return aa.forEach(function(t){e.push(Ji.concat(["other"]).indexOf(t))}),e.indexOf(n)>-1?t:"#fff"})),Yt(".group").each(function(t,n,e){var r={};Ji.forEach(function(n){r[n]=Array(Math.round(t[n]/100*100)).fill({state:t.code,country:n})});var o=[];(ua=Ji.filter(function(t){return aa.indexOf(t)<0})).forEach(function(t){o=o.concat(r[t])}),aa.forEach(function(t){o=o.concat(r[t])}),o=Array(100-o.length).fill({state:t.code,country:"other"}).concat(o);var i=Bt(e[n]).attr("x"),a=Bt(e[n]).attr("y"),u=Bt(e[n]).selectAll(".percent.".concat(t.code)).data(o,function(t){return t});u.exit().remove(),u.enter().append("rect").attr("width",(Xi-oa/2)/10).attr("height",(Xi-oa/2)/10).attr("stroke","#fff").attr("stroke-width","0.25px").merge(u).attr("class",function(n){return"percent ".concat(t.code," ").concat(n.country)}).attr("x",function(t,n){var e=o.findIndex(function(t){return!(qi(ua).concat(["other"]).indexOf(t.country)>-1)});return e=e>=0?e:null,(10*Math.ceil((n+1)/10)<=10*Math.ceil(e/10)?Math.abs(99-n):n)%10*(Xi-2)/10+parseInt(i,10)+2}).attr("y",function(t,n){return Math.ceil((n+1)/10)*(Xi-2)/10+parseInt(a,10)-Xi/10+1+2}).transition().duration(600).attr("fill",function(t){return Gi(t.country)});var c=Bt(e[n]).selectAll(".label.".concat(t.code));c.remove(),(c=Bt(e[n]).selectAll(".label.".concat(t.code)).data([t]).enter().append("text").attr("class","label "+t.code)).attr("x",function(t){return(t.col-1)*Xi+Xi/2+oa*t.col}).attr("y",function(t){return(t.row-1)*Xi+(Xi/2-3)+oa*t.row}).style("text-anchor","middle").text(t.code)}),Yt(".group").on("click",e.states.click)},drawState:function(e,r){Bt(".stateModal").remove(),Gi=Kt().domain(Ji.concat(["other"])).range(Ki);var o=t.filter(function(t){return t.code===r.code});Ri=n.width();var i=.3*($i=n.width()),a=na.selectAll(".map");na.selectAll(".gridmap"),a.append("g").attr("class","stateModal"),Bt(".stateModal").append("rect").attr("width",Ri).attr("height",$i).attr("fill","#000").attr("opacity","0.3"),Bt(".stateModal").append("rect").attr("width",.75*Ri).attr("height",.45*$i).attr("x",Ri/7.5).attr("y",Ri/7.5).attr("fill","#fff").attr("stroke","#000").attr("stroke-width","1.5px").attr("paint-order","stroke"),Bt(".stateModal").append("foreignObject").attr("cursor","pointer").attr("width",Ri/10).attr("height",$i/20).attr("x",Ri-Ri/7.5-2*oa).attr("y",Ri/7.5+oa).append("xhtml:div").attr("class","icon-close-lg").on("click",function(){Bt(".stateModal").remove()}),Bt(".stateModal").selectAll(".stateBorder").data(o).enter().append("rect").attr("class","stateBorder").attr("fill","#fff").attr("stroke",function(t){return Vi(t.totaldollars)}).attr("stroke-width",function(t){return Zi(t.totaldollars)}).attr("x",Ri/5).attr("y",Ri/5+oa).attr("width",i-3).attr("height",i-2);var u={};Ji.forEach(function(t){u[t]=Array(Math.round(o[0][t]/100*100)).fill({state:o[0].code,country:t})});var c=[];(ua=Ji.filter(function(t){return aa.indexOf(t)<0})).forEach(function(t){c=c.concat(u[t])}),aa.forEach(function(t){c=c.concat(u[t])}),c=Array(100-c.length).fill({state:o[0].code,country:"other"}).concat(c);var s=Bt(".stateBorder").attr("x"),l=Bt(".stateBorder").attr("y"),f=(Bt(".stateModal").selectAll(".percentModal.".concat(o[0].code)).data(c,function(t){return t}).enter().append("rect").attr("class",function(t){return"percent ".concat(o[0].code," ").concat(t.country)}).attr("fill",function(t){return Gi(t.country)}).attr("x",function(t,n){var e=c.findIndex(function(t){return!(qi(ua).concat(["other"]).indexOf(t.country)>-1)});return e=e>=0?e:null,(10*Math.ceil((n+1)/10)<=10*Math.ceil(e/10)?Math.abs(99-n):n)%10*(i-2)/10+parseInt(s,10)+2}).attr("y",function(t,n){return Math.ceil((n+1)/10)*(i-2)/10+parseInt(l,10)-i/10+1+2}).attr("height",0).attr("width",(i-ia)/10).attr("height",(i-ia)/10),parseInt(s,10)+i+oa);Bt(".stateModal").append("foreignObject").attr("x",f).attr("y",parseInt(l,10)-oa).attr("width",Ri-i).append("xhtml:div").html('<div class="modal-heading">\n                '.concat(r.state,'\n              </div>\n              <div class="modal-body">\n                $').concat(Wi(r.totaldollars).replace(/G/,"B"),' Total Trade (2017)\n              </div>\n              <ul class="modal-list">\n              ').concat(Ji.map(function(t){return'<li class="'.concat(t,'">').concat(t.charAt(0).toUpperCase()+t.slice(1),": ").concat(o[0][t]?Qi(o[0][t]):0,"%</li> ")}).join(""),'\n\n              </ul> <div class="modal-footer">\n                  ').concat(Qi(r.grandtotal),"% of Total (2017)\n                </div>"))},interactions:e}}function sa(){if(Yi){var t=na.node().offsetWidth;Yi.drawGridMap.width(t),Yi.drawGridMap.height(t),na.call(Yi.drawGridMap),na.call(Yi.drawPercents),Bt(".stateModal").size()&&(Bt(".stateModal").remove(),Yi.interactions.states.click(zi))}}var la={init:function(t){na.datum(t),Yi=ca(t),sa()},draw:ca,resize:sa};Object(C.polyfill)();var fa;Z("https://spreadsheets.google.com/feeds/list/".concat("1qmhbztaMBKatqZkT4dQQsEm_j2Xl5d9Mp3zKmmdrqy4","/1/public/values?alt=json")).then(function(t){return t.json()}).then(function(t){fa=function(t){return t.map(function(t){var n=t,e={};return Object.keys(n).forEach(function(t){var r=t;r.indexOf("gsx$")>-1&&(e[r.replace("gsx$","")]=n[r].$t)}),e})}(t.feed.entry)}).then(function(){var t=c(fa,function(t){return+t.totaldollars});document.querySelector(".min").innerHTML="$"+M(",.0f")(t[0]).replace(/G/,"B"),document.querySelector(".max").innerHTML="$"+M(",.0f")(t[1]).replace(/G/,"B"),la.init(fa)}),window.addEventListener("resize",la.resize)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,