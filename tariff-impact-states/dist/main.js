!function(D){var e=window.webpackHotUpdate;window.webpackHotUpdate=function(t,n){!function(t,n){if(!H[t]||!h[t])return;for(var e in h[t]=!1,n)Object.prototype.hasOwnProperty.call(n,e)&&(P[e]=n[e]);0==--s&&0===l&&y()}(t,n),e&&e(t,n)};var o,r=!0,C="4234e9797c52dac51df7",n=1e4,U={},O=[],i=[];function a(n){var e=B[n];if(!e)return L;function r(t){return e.hot.active?(B[t]?-1===B[t].parents.indexOf(n)&&B[t].parents.push(n):(O=[n],o=t),-1===e.children.indexOf(t)&&e.children.push(t)):(console.warn("[HMR] unexpected require("+t+") from disposed module "+n),O=[]),L(t)}function t(n){return{configurable:!0,enumerable:!0,get:function(){return L[n]},set:function(t){L[n]=t}}}for(var i in L)Object.prototype.hasOwnProperty.call(L,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,t(i));return r.e=function(t){return"ready"===N&&j("prepare"),l++,L.e(t).then(n,function(t){throw n(),t});function n(){l--,"prepare"===N&&(f[t]||p(t),0===l&&0===s&&y())}},r.t=function(t,n){return 1&n&&(t=r(t)),L.t(t,-2&n)},r}var u=[],N="idle";function j(t){N=t;for(var n=0;n<u.length;n++)u[n].call(null,t)}var c,P,F,s=0,l=0,f={},h={},H={};function I(t){return+t+""===t?+t:t}function d(t){if("idle"!==N)throw new Error("check() is only allowed in idle status");return r=t,j("check"),function(t){return t=t||1e4,new Promise(function(n,e){if("undefined"==typeof XMLHttpRequest)return e(new Error("No browser support"));try{var r=new XMLHttpRequest,i=L.p+""+C+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(t){return e(t)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)e(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)n();else if(200!==r.status&&304!==r.status)e(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(t){return void e(t)}n(t)}}})}(n).then(function(t){if(!t)return j("idle"),null;h={},f={},H=t.c,F=t.h,j("prepare");var n=new Promise(function(t,n){c={resolve:t,reject:n}});P={};return p(0),"prepare"===N&&0===l&&0===s&&y(),n})}function p(t){H[t]?(h[t]=!0,s++,function(t){var n=document.createElement("script");n.charset="utf-8",n.src=L.p+""+t+"."+C+".hot-update.js",document.head.appendChild(n)}(t)):f[t]=!0}function y(){j("ready");var n=c;if(c=null,n)if(r)Promise.resolve().then(function(){return g(r)}).then(function(t){n.resolve(t)},function(t){n.reject(t)});else{var t=[];for(var e in P)Object.prototype.hasOwnProperty.call(P,e)&&t.push(I(e));n.resolve(t)}}function g(e){if("ready"!==N)throw new Error("apply() is only allowed in ready status");var t,n,r,l,i;function o(t){for(var n=[t],e={},r=n.map(function(t){return{chain:[t],id:t}});0<r.length;){var i=r.pop(),o=i.id,a=i.chain;if((l=B[o])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(l.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var u=0;u<l.parents.length;u++){var c=l.parents[u],s=B[c];if(s){if(s.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([c]),moduleId:o,parentId:c};-1===n.indexOf(c)&&(s.hot._acceptedDependencies[o]?(e[c]||(e[c]=[]),f(e[c],[o])):(delete e[c],n.push(c),r.push({chain:a.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:t,outdatedModules:n,outdatedDependencies:e}}function f(t,n){for(var e=0;e<n.length;e++){var r=n[e];-1===t.indexOf(r)&&t.push(r)}}e=e||{};function a(){console.warn("[HMR] unexpected require("+d.moduleId+") to disposed module")}var u={},c=[],s={};for(var h in P)if(Object.prototype.hasOwnProperty.call(P,h)){var d;i=I(h);var p=!1,y=!1,g=!1,v="";switch((d=P[h]?o(i):{type:"disposed",moduleId:h}).chain&&(v="\nUpdate propagation: "+d.chain.join(" -> ")),d.type){case"self-declined":e.onDeclined&&e.onDeclined(d),e.ignoreDeclined||(p=new Error("Aborted because of self decline: "+d.moduleId+v));break;case"declined":e.onDeclined&&e.onDeclined(d),e.ignoreDeclined||(p=new Error("Aborted because of declined dependency: "+d.moduleId+" in "+d.parentId+v));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(d),e.ignoreUnaccepted||(p=new Error("Aborted because "+i+" is not accepted"+v));break;case"accepted":e.onAccepted&&e.onAccepted(d),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(d),g=!0;break;default:throw new Error("Unexception type "+d.type)}if(p)return j("abort"),Promise.reject(p);if(y)for(i in s[i]=P[i],f(c,d.outdatedModules),d.outdatedDependencies)Object.prototype.hasOwnProperty.call(d.outdatedDependencies,i)&&(u[i]||(u[i]=[]),f(u[i],d.outdatedDependencies[i]));g&&(f(c,[d.moduleId]),s[i]=a)}var m,w=[];for(n=0;n<c.length;n++)i=c[n],B[i]&&B[i].hot._selfAccepted&&s[i]!==a&&w.push({module:i,errorHandler:B[i].hot._selfAccepted});j("dispose"),Object.keys(H).forEach(function(t){!1===H[t]&&function(t){delete installedChunks[t]}(t)});for(var _,b,M=c.slice();0<M.length;)if(i=M.pop(),l=B[i]){var x={},A=l.hot._disposeHandlers;for(r=0;r<A.length;r++)(t=A[r])(x);for(U[i]=x,l.hot.active=!1,delete B[i],delete u[i],r=0;r<l.children.length;r++){var T=B[l.children[r]];T&&0<=(m=T.parents.indexOf(i))&&T.parents.splice(m,1)}}for(i in u)if(Object.prototype.hasOwnProperty.call(u,i)&&(l=B[i]))for(b=u[i],r=0;r<b.length;r++)_=b[r],0<=(m=l.children.indexOf(_))&&l.children.splice(m,1);for(i in j("apply"),C=F,s)Object.prototype.hasOwnProperty.call(s,i)&&(D[i]=s[i]);var E=null;for(i in u)if(Object.prototype.hasOwnProperty.call(u,i)&&(l=B[i])){b=u[i];var k=[];for(n=0;n<b.length;n++)if(_=b[n],t=l.hot._acceptedDependencies[_]){if(-1!==k.indexOf(t))continue;k.push(t)}for(n=0;n<k.length;n++){t=k[n];try{t(b)}catch(t){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:b[n],error:t}),e.ignoreErrored||(E=E||t)}}}for(n=0;n<w.length;n++){var S=w[n];i=S.module,O=[i];try{L(i)}catch(n){if("function"==typeof S.errorHandler)try{S.errorHandler(n)}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:i,error:t,originalError:n}),e.ignoreErrored||(E=E||t),E=E||n}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:i,error:n}),e.ignoreErrored||(E=E||n)}}return E?(j("fail"),Promise.reject(E)):(j("idle"),new Promise(function(t){t(c)}))}var B={};function L(t){if(B[t])return B[t].exports;var n=B[t]={i:t,l:!1,exports:{},hot:function(t){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:o!==t,active:!0,accept:function(t,n){if(void 0===t)r._selfAccepted=!0;else if("function"==typeof t)r._selfAccepted=t;else if("object"==typeof t)for(var e=0;e<t.length;e++)r._acceptedDependencies[t[e]]=n||function(){};else r._acceptedDependencies[t]=n||function(){}},decline:function(t){if(void 0===t)r._selfDeclined=!0;else if("object"==typeof t)for(var n=0;n<t.length;n++)r._declinedDependencies[t[n]]=!0;else r._declinedDependencies[t]=!0},dispose:function(t){r._disposeHandlers.push(t)},addDisposeHandler:function(t){r._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=r._disposeHandlers.indexOf(t);0<=n&&r._disposeHandlers.splice(n,1)},check:d,apply:g,status:function(t){if(!t)return N;u.push(t)},addStatusHandler:function(t){u.push(t)},removeStatusHandler:function(t){var n=u.indexOf(t);0<=n&&u.splice(n,1)},data:U[t]};return o=void 0,r}(t),parents:(i=O,O=[],i),children:[]};return D[t].call(n.exports,n,n.exports,a(t)),n.l=!0,n.exports}L.m=D,L.c=B,L.d=function(t,n,e){L.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},L.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},L.t=function(n,t){if(1&t&&(n=L(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(L.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)L.d(e,r,function(t){return n[t]}.bind(null,r));return e},L.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return L.d(n,"a",n),n},L.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},L.p="",L.h=function(){return C},a(4)(L.s=4)}([function(t,n,e){(function(H,I){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.6+9869a4bc
 */
t.exports=function(){"use strict";function s(t){return"function"==typeof t}var e=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},r=0,n=void 0,i=void 0,a=function(t,n){h[r]=t,h[r+1]=n,2===(r+=2)&&(i?i(d):p())};var t="undefined"!=typeof window?window:void 0,o=t||{},u=o.MutationObserver||o.WebKitMutationObserver,c="undefined"==typeof self&&void 0!==H&&"[object process]"==={}.toString.call(H),l="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function f(){var t=setTimeout;return function(){return t(d,1)}}var h=new Array(1e3);function d(){for(var t=0;t<r;t+=2){var n=h[t],e=h[t+1];n(e),h[t]=void 0,h[t+1]=void 0}r=0}var p=void 0;function y(t,n){var e=this,r=new this.constructor(m);void 0===r[v]&&j(r);var i=e._state;if(i){var o=arguments[i-1];a(function(){return O(i,r,o,e._result)})}else C(e,r,t,n);return r}function g(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var n=new this(m);return E(n,t),n}p=c?function(){return H.nextTick(d)}:u?function(){var t=0,n=new u(d),e=document.createTextNode("");return n.observe(e,{characterData:!0}),function(){e.data=t=++t%2}}():l?function(){var t=new MessageChannel;return t.port1.onmessage=d,function(){return t.port2.postMessage(0)}}():void 0===t?function(){try{var t=Function("return this")().require("vertx");return void 0===(n=t.runOnLoop||t.runOnContext)?f():function(){n(d)}}catch(t){return f()}}():f();var v=Math.random().toString(36).substring(2);function m(){}var w=void 0,_=1,b=2,M={error:null};function x(t){try{return t.then}catch(t){return M.error=t,M}}function A(t,n,e,r){try{t.call(n,e,r)}catch(t){return t}}function T(t,n,e){n.constructor===t.constructor&&e===y&&n.constructor.resolve===g?function(n,t){t._state===_?S(n,t._result):t._state===b?D(n,t._result):C(t,void 0,function(t){return E(n,t)},function(t){return D(n,t)})}(t,n):e===M?(D(t,M.error),M.error=null):void 0===e?S(t,n):s(e)?function(t,r,i){a(function(n){var e=!1,t=A(i,r,function(t){e||(e=!0,r!==t?E(n,t):S(n,t))},function(t){e||(e=!0,D(n,t))},n._label);!e&&t&&(e=!0,D(n,t))},t)}(t,n,e):S(t,n)}function E(t,n){t===n?D(t,new TypeError("You cannot resolve a promise with itself")):!function(t){var n=typeof t;return null!==t&&("object"==n||"function"==n)}(n)?S(t,n):T(t,n,x(n))}function k(t){t._onerror&&t._onerror(t._result),U(t)}function S(t,n){t._state===w&&(t._result=n,t._state=_,0!==t._subscribers.length&&a(U,t))}function D(t,n){t._state===w&&(t._state=b,t._result=n,a(k,t))}function C(t,n,e,r){var i=t._subscribers,o=i.length;t._onerror=null,i[o]=n,i[o+_]=e,i[o+b]=r,0===o&&t._state&&a(U,t)}function U(t){var n=t._subscribers,e=t._state;if(0!==n.length){for(var r=void 0,i=void 0,o=t._result,a=0;a<n.length;a+=3)r=n[a],i=n[a+e],r?O(e,r,i,o):i(o);t._subscribers.length=0}}function O(t,n,e,r){var i=s(e),o=void 0,a=void 0,u=void 0,c=void 0;if(i){if((o=function(t,n){try{return t(n)}catch(t){return M.error=t,M}}(e,r))===M?(c=!0,a=o.error,o.error=null):u=!0,n===o)return void D(n,new TypeError("A promises callback cannot return that same promise."))}else o=r,u=!0;n._state!==w||(i&&u?E(n,o):c?D(n,a):t===_?S(n,o):t===b&&D(n,o))}var N=0;function j(t){t[v]=N++,t._state=void 0,t._result=void 0,t._subscribers=[]}var P=function(){function t(t,n){this._instanceConstructor=t,this.promise=new t(m),this.promise[v]||j(this.promise),e(n)?(this.length=n.length,this._remaining=n.length,this._result=new Array(this.length),0===this.length?S(this.promise,this._result):(this.length=this.length||0,this._enumerate(n),0===this._remaining&&S(this.promise,this._result))):D(this.promise,new Error("Array Methods must be provided an Array"))}return t.prototype._enumerate=function(t){for(var n=0;this._state===w&&n<t.length;n++)this._eachEntry(t[n],n)},t.prototype._eachEntry=function(n,t){var e=this._instanceConstructor,r=e.resolve;if(r===g){var i=x(n);if(i===y&&n._state!==w)this._settledAt(n._state,t,n._result);else if("function"!=typeof i)this._remaining--,this._result[t]=n;else if(e===F){var o=new e(m);T(o,n,i),this._willSettleAt(o,t)}else this._willSettleAt(new e(function(t){return t(n)}),t)}else this._willSettleAt(r(n),t)},t.prototype._settledAt=function(t,n,e){var r=this.promise;r._state===w&&(this._remaining--,t===b?D(r,e):this._result[n]=e),0===this._remaining&&S(r,this._result)},t.prototype._willSettleAt=function(t,n){var e=this;C(t,void 0,function(t){return e._settledAt(_,n,t)},function(t){return e._settledAt(b,n,t)})},t}();var F=function(){function n(t){this[v]=N++,this._result=this._state=void 0,this._subscribers=[],m!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof n?function(n,t){try{t(function(t){E(n,t)},function(t){D(n,t)})}catch(t){D(n,t)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return n.prototype.catch=function(t){return this.then(null,t)},n.prototype.finally=function(n){var e=this.constructor;return s(n)?this.then(function(t){return e.resolve(n()).then(function(){return t})},function(t){return e.resolve(n()).then(function(){throw t})}):this.then(n,n)},n}();return F.prototype.then=y,F.all=function(t){return new P(this,t).promise},F.race=function(i){var o=this;return e(i)?new o(function(t,n){for(var e=i.length,r=0;r<e;r++)o.resolve(i[r]).then(t,n)}):new o(function(t,n){return n(new TypeError("You must pass an array to race."))})},F.resolve=g,F.reject=function(t){var n=new this(m);return D(n,t),n},F._setScheduler=function(t){i=t},F._setAsap=function(t){a=t},F._asap=a,F.polyfill=function(){var t=void 0;if(void 0!==I)t=I;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=t.Promise;if(n){var e=null;try{e=Object.prototype.toString.call(n.resolve())}catch(t){}if("[object Promise]"===e&&!n.cast)return}t.Promise=F},F.Promise=F}()}).call(this,e(2),e(3))},function(t,n,e){},function(t,n){var e,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(n){if(e===setTimeout)return setTimeout(n,0);if((e===o||!e)&&setTimeout)return e=setTimeout,setTimeout(n,0);try{return e(n,0)}catch(t){try{return e.call(null,n,0)}catch(t){return e.call(this,n,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:o}catch(t){e=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var c,s=[],l=!1,f=-1;function h(){l&&c&&(l=!1,c.length?s=c.concat(s):f=-1,s.length&&d())}function d(){if(!l){var t=u(h);l=!0;for(var n=s.length;n;){for(c=s,s=[];++f<n;)c&&c[f].run();f=-1,n=s.length}c=null,l=!1,function(n){if(r===clearTimeout)return clearTimeout(n);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(n);try{r(n)}catch(t){try{return r.call(null,n)}catch(t){return r.call(this,n)}}}(t)}}function p(t,n){this.fun=t,this.array=n}function y(){}i.nextTick=function(t){var n=new Array(arguments.length-1);if(1<arguments.length)for(var e=1;e<arguments.length;e++)n[e-1]=arguments[e];s.push(new p(t,n)),1!==s.length||l||u(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){"use strict";e.r(n);e(1);var r=function(t,n){return t<n?-1:n<t?1:n<=t?0:NaN},i=function(o){return 1===o.length&&(o=function(e){return function(t,n){return r(e(t),n)}}(o)),{left:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;o(t[i],n)<0?e=1+i:r=i}return e},right:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;0<o(t[i],n)?r=i:e=1+i}return e}}};var o=i(r),a=o.right,u=(o.left,a);var c=function(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e<=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(e<r&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e<=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(e<r&&(r=e),i<e&&(i=e));return[r,i]},s=Array.prototype,l=(s.slice,s.map,Math.sqrt(50)),f=Math.sqrt(10),h=Math.sqrt(2),g=function(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&0<e)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=d(t,n,e))||!isFinite(a))return[];if(0<a)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o};function d(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return 0<=i?(l<=o?10:f<=o?5:h<=o?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(l<=o?10:f<=o?5:h<=o?2:1)}function p(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[1<r.length?r[0]+r.slice(2):r,+t.slice(e+1)]}function y(t){return(t=p(Math.abs(t)))?t[1]:NaN}var v=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function T(t){return new m(t)}function m(t){if(!(n=v.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}T.prototype=m.prototype,m.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};function w(t,n){var e=p(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}function _(t){return t}var E,b,M,k={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return w(100*t,n)},r:w,s:function(t,n){var e=p(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(E=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:a<o?r+new Array(o-a+1).join("0"):0<o?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+p(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},S=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];b=function(t){var M=t.grouping&&t.thousands?function(u,c){return function(t,n){for(var e=t.length,r=[],i=0,o=u[0],a=0;0<e&&0<o&&(n<a+o+1&&(o=Math.max(1,n-a)),r.push(t.substring(e-=o,e+o)),!((a+=o+1)>n));)o=u[i=(i+1)%u.length];return r.reverse().join(c)}}(t.grouping,t.thousands):_,r=t.currency,x=t.decimal,A=t.numerals?function(n){return function(t){return t.replace(/[0-9]/g,function(t){return n[+t]})}}(t.numerals):_,i=t.percent||"%";function a(t){var s=(t=T(t)).fill,l=t.align,f=t.sign,n=t.symbol,h=t.zero,d=t.width,p=t.comma,y=t.precision,g=t.trim,v=t.type;"n"===v?(p=!0,v="g"):k[v]||(null==y&&(y=12),g=!0,v="g"),(h||"0"===s&&"="===l)&&(h=!0,s="0",l="=");var m="$"===n?r[0]:"#"===n&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",w="$"===n?r[1]:/[%p]/.test(v)?i:"",_=k[v],b=/[defgprs%]/.test(v);function e(t){var n,e,r,i=m,o=w;if("c"===v)o=_(t)+o,t="";else{var a=(t=+t)<0;if(t=_(Math.abs(t),y),g&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(0<i){if(!+t[r])break t;i=0}}return 0<i?t.slice(0,i)+t.slice(n+1):t}(t)),a&&0==+t&&(a=!1),i=(a?"("===f?f:"-":"-"===f||"("===f?"":f)+i,o=("s"===v?S[8+E/3]:"")+o+(a&&"("===f?")":""),b)for(n=-1,e=t.length;++n<e;)if((r=t.charCodeAt(n))<48||57<r){o=(46===r?x+t.slice(n+1):t.slice(n))+o,t=t.slice(0,n);break}}p&&!h&&(t=M(t,1/0));var u=i.length+t.length+o.length,c=u<d?new Array(d-u+1).join(s):"";switch(p&&h&&(t=M(c+t,c.length?d-o.length:1/0),c=""),l){case"<":t=i+t+o+c;break;case"=":t=i+c+t+o;break;case"^":t=c.slice(0,u=c.length>>1)+i+t+o+c.slice(u);break;default:t=c+i+t+o}return A(t)}return y=null==y?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),e.toString=function(){return t+""},e}return{format:a,formatPrefix:function(t,n){var e=a(((t=T(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(y(n)/3))),i=Math.pow(10,-r),o=S[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),M=b.format,b.formatPrefix;var x=e(0),A={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(A.arrayBuffer)var D=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],C=ArrayBuffer.isView||function(t){return t&&-1<D.indexOf(Object.prototype.toString.call(t))};function U(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function O(t){return"string"!=typeof t&&(t=String(t)),t}function N(n){var t={next:function(){var t=n.shift();return{done:void 0===t,value:t}}};return A.iterable&&(t[Symbol.iterator]=function(){return t}),t}function j(n){this.map={},n instanceof j?n.forEach(function(t,n){this.append(n,t)},this):Array.isArray(n)?n.forEach(function(t){this.append(t[0],t[1])},this):n&&Object.getOwnPropertyNames(n).forEach(function(t){this.append(t,n[t])},this)}function P(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function F(e){return new Promise(function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function H(t){var n=new FileReader,e=F(n);return n.readAsArrayBuffer(t),e}function I(t){if(t.slice)return t.slice(0);var n=new Uint8Array(t.byteLength);return n.set(new Uint8Array(t)),n.buffer}function B(){return this.bodyUsed=!1,this._initBody=function(t){(this._bodyInit=t)?"string"==typeof t?this._bodyText=t:A.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:A.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:A.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():A.arrayBuffer&&A.blob&&function(t){return t&&DataView.prototype.isPrototypeOf(t)}(t)?(this._bodyArrayBuffer=I(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):A.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||C(t))?this._bodyArrayBuffer=I(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):A.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},A.blob&&(this.blob=function(){var t=P(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?P(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(H)}),this.text=function(){var t=P(this);if(t)return t;if(this._bodyBlob)return function(t){var n=new FileReader,e=F(n);return n.readAsText(t),e}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var n=new Uint8Array(t),e=new Array(n.length),r=0;r<n.length;r++)e[r]=String.fromCharCode(n[r]);return e.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},A.formData&&(this.formData=function(){return this.text().then(Y)}),this.json=function(){return this.text().then(JSON.parse)},this}j.prototype.append=function(t,n){t=U(t),n=O(n);var e=this.map[t];this.map[t]=e?e+", "+n:n},j.prototype.delete=function(t){delete this.map[U(t)]},j.prototype.get=function(t){return t=U(t),this.has(t)?this.map[t]:null},j.prototype.has=function(t){return this.map.hasOwnProperty(U(t))},j.prototype.set=function(t,n){this.map[U(t)]=O(n)},j.prototype.forEach=function(t,n){for(var e in this.map)this.map.hasOwnProperty(e)&&t.call(n,this.map[e],e,this)},j.prototype.keys=function(){var e=[];return this.forEach(function(t,n){e.push(n)}),N(e)},j.prototype.values=function(){var n=[];return this.forEach(function(t){n.push(t)}),N(n)},j.prototype.entries=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),N(e)},A.iterable&&(j.prototype[Symbol.iterator]=j.prototype.entries);var L=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function q(t,n){var e=(n=n||{}).body;if(t instanceof q){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,n.headers||(this.headers=new j(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,e||null==t._bodyInit||(e=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=n.credentials||this.credentials||"same-origin",!n.headers&&this.headers||(this.headers=new j(n.headers)),this.method=function(t){var n=t.toUpperCase();return-1<L.indexOf(n)?n:t}(n.method||this.method||"GET"),this.mode=n.mode||this.mode||null,this.signal=n.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&e)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(e)}function Y(t){var i=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),e=n.shift().replace(/\+/g," "),r=n.join("=").replace(/\+/g," ");i.append(decodeURIComponent(e),decodeURIComponent(r))}}),i}function R(t,n){n=n||{},this.type="default",this.status=void 0===n.status?200:n.status,this.ok=200<=this.status&&this.status<300,this.statusText="statusText"in n?n.statusText:"OK",this.headers=new j(n.headers),this.url=n.url||"",this._initBody(t)}q.prototype.clone=function(){return new q(this,{body:this._bodyInit})},B.call(q.prototype),B.call(R.prototype),R.prototype.clone=function(){return new R(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new j(this.headers),url:this.url})},R.error=function(){var t=new R(null,{status:0,statusText:""});return t.type="error",t};var X=[301,302,303,307,308];R.redirect=function(t,n){if(-1===X.indexOf(n))throw new RangeError("Invalid status code");return new R(null,{status:n,headers:{location:t}})};var z=self.DOMException;try{new z}catch(t){(z=function(t,n){this.message=t,this.name=n;var e=Error(t);this.stack=e.stack}).prototype=Object.create(Error.prototype),z.prototype.constructor=z}function $(o,a){return new Promise(function(e,t){var n=new q(o,a);if(n.signal&&n.signal.aborted)return t(new z("Aborted","AbortError"));var r=new XMLHttpRequest;function i(){r.abort()}r.onload=function(){var t={status:r.status,statusText:r.statusText,headers:function(t){var i=new j;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var n=t.split(":"),e=n.shift().trim();if(e){var r=n.join(":").trim();i.append(e,r)}}),i}(r.getAllResponseHeaders()||"")};t.url="responseURL"in r?r.responseURL:t.headers.get("X-Request-URL");var n="response"in r?r.response:r.responseText;e(new R(n,t))},r.onerror=function(){t(new TypeError("Network request failed"))},r.ontimeout=function(){t(new TypeError("Network request failed"))},r.onabort=function(){t(new z("Aborted","AbortError"))},r.open(n.method,n.url,!0),"include"===n.credentials?r.withCredentials=!0:"omit"===n.credentials&&(r.withCredentials=!1),"responseType"in r&&A.blob&&(r.responseType="blob"),n.headers.forEach(function(t,n){r.setRequestHeader(n,t)}),n.signal&&(n.signal.addEventListener("abort",i),r.onreadystatechange=function(){4===r.readyState&&n.signal.removeEventListener("abort",i)}),r.send(void 0===n._bodyInit?null:n._bodyInit)})}$.polyfill=!0,self.fetch||(self.fetch=$,self.Headers=j,self.Request=q,self.Response=R);function V(t){var n=t+="",e=n.indexOf(":");return 0<=e&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),W.hasOwnProperty(n)?{space:W[n],local:t}:t}var G="http://www.w3.org/1999/xhtml",W={svg:"http://www.w3.org/2000/svg",xhtml:G,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Z(t){var n=V(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===G&&t.documentElement.namespaceURI===G?t.createElement(e):t.createElementNS(n,e)}})(n)}function Q(){}function J(t){return null==t?Q:function(){return this.querySelector(t)}}function K(){return[]}function tt(t){return null==t?K:function(){return this.querySelectorAll(t)}}function nt(t){return function(){return this.matches(t)}}function et(t){return new Array(t.length)}function rt(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}rt.prototype={constructor:rt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function it(t,n,e,r,i,o){for(var a,u=0,c=n.length,s=o.length;u<s;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new rt(t,o[u]);for(;u<c;++u)(a=n[u])&&(i[u]=a)}function ot(t,n,e,r,i,o,a){var u,c,s,l={},f=n.length,h=o.length,d=new Array(f);for(u=0;u<f;++u)(c=n[u])&&(d[u]=s="$"+a.call(c,c.__data__,u,n),s in l?i[u]=c:l[s]=c);for(u=0;u<h;++u)(c=l[s="$"+a.call(t,o[u],u,o)])?((r[u]=c).__data__=o[u],l[s]=null):e[u]=new rt(t,o[u]);for(u=0;u<f;++u)(c=n[u])&&l[d[u]]===c&&(i[u]=c)}function at(t,n){return t<n?-1:n<t?1:n<=t?0:NaN}var ut=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function ct(t,n){return t.style.getPropertyValue(n)||ut(t).getComputedStyle(t,null).getPropertyValue(n)}function st(t){return t.trim().split(/^|\s+/)}function lt(t){return t.classList||new ft(t)}function ft(t){this._node=t,this._names=st(t.getAttribute("class")||"")}function ht(t,n){for(var e=lt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function dt(t,n){for(var e=lt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}ft.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);0<=n&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return 0<=this._names.indexOf(t)}};function pt(){this.textContent=""}function yt(){this.innerHTML=""}function gt(){this.nextSibling&&this.parentNode.appendChild(this)}function vt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function mt(){return null}function wt(){var t=this.parentNode;t&&t.removeChild(this)}function _t(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function bt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Mt={},xt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Mt={mouseenter:"mouseover",mouseleave:"mouseout"}));function At(e,t,n){return e=Tt(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function Tt(e,r,i){return function(t){var n=xt;xt=t;try{e.call(this,this.__data__,r,i)}finally{xt=n}}}function Et(o){return function(){var t=this.__on;if(t){for(var n,e=0,r=-1,i=t.length;e<i;++e)n=t[e],o.type&&n.type!==o.type||n.name!==o.name?t[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?t.length=r:delete this.__on}}}function kt(c,s,l){var f=Mt.hasOwnProperty(c.type)?At:Tt;return function(t,n,e){var r,i=this.__on,o=f(s,n,e);if(i)for(var a=0,u=i.length;a<u;++a)if((r=i[a]).type===c.type&&r.name===c.name)return this.removeEventListener(r.type,r.listener,r.capture),this.addEventListener(r.type,r.listener=o,r.capture=l),void(r.value=s);this.addEventListener(c.type,o,l),r={type:c.type,name:c.name,value:s,listener:o,capture:l},i?i.push(r):this.__on=[r]}}function St(t,n,e){var r=ut(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var Dt=[null];function Ct(t,n){this._groups=t,this._parents=n}function Ut(){return new Ct([[document.documentElement]],Dt)}Ct.prototype=Ut.prototype={constructor:Ct,select:function(t){"function"!=typeof t&&(t=J(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],c=u.length,s=r[i]=new Array(c),l=0;l<c;++l)(o=u[l])&&(a=t.call(o,o.__data__,l,u))&&("__data__"in o&&(a.__data__=o.__data__),s[l]=a);return new Ct(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=tt(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],c=u.length,s=0;s<c;++s)(a=u[s])&&(r.push(t.call(a,a.__data__,s,u)),i.push(a));return new Ct(r,i)},filter:function(t){"function"!=typeof t&&(t=nt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new Ct(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),s=-1,this.each(function(t){d[++s]=t}),d;var e=n?ot:it,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var o=i.length,a=new Array(o),u=new Array(o),c=new Array(o),s=0;s<o;++s){var l=r[s],f=i[s],h=f.length,d=t.call(l,l&&l.__data__,s,r),p=d.length,y=u[s]=new Array(p),g=a[s]=new Array(p);e(l,f,y,g,c[s]=new Array(h),d,n);for(var v,m,w=0,_=0;w<p;++w)if(v=y[w]){for(_<=w&&(_=w+1);!(m=g[_])&&++_<p;);v._next=m||null}}return(a=new Ct(a,r))._enter=u,a._exit=c,a},enter:function(){return new Ct(this._enter||this._groups.map(et),this._parents)},exit:function(){return new Ct(this._exit||this._groups.map(et),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,s=n[u],l=e[u],f=s.length,h=a[u]=new Array(f),d=0;d<f;++d)(c=s[d]||l[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new Ct(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];0<=--o;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e=e||at;for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,u=n[o],c=u.length,s=i[o]=new Array(c),l=0;l<c;++l)(a=u[l])&&(s[l]=a);s.sort(t)}return new Ct(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=V(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(n,e){return function(){var t=e.apply(this,arguments);null==t?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,t)}}:function(n,e){return function(){var t=e.apply(this,arguments);null==t?this.removeAttribute(n):this.setAttribute(n,t)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return 1<arguments.length?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(n,e,r){return function(){var t=e.apply(this,arguments);null==t?this.style.removeProperty(n):this.style.setProperty(n,t,r)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):ct(this.node(),t)},property:function(t,n){return 1<arguments.length?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(n,e){return function(){var t=e.apply(this,arguments);null==t?delete this[n]:this[n]=t}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=st(t+"");if(arguments.length<2){for(var r=lt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?ht:dt)(this,t)}}:n?function(t){return function(){ht(this,t)}}:function(t){return function(){dt(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?pt:("function"==typeof t?function(n){return function(){var t=n.apply(this,arguments);this.textContent=null==t?"":t}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?yt:("function"==typeof t?function(n){return function(){var t=n.apply(this,arguments);this.innerHTML=null==t?"":t}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(gt)},lower:function(){return this.each(vt)},append:function(t){var n="function"==typeof t?t:Z(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:Z(t),r=null==n?mt:"function"==typeof n?n:J(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(wt)},clone:function(t){return this.select(t?bt:_t)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return 0<=e&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?kt:Et,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var c,s=0,l=u.length;s<l;++s)for(r=0,c=u[s];r<a;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return St(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return St(this,t,n)}})(t,n))}};var Ot=Ut,Nt=function(t){return"string"==typeof t?new Ct([[document.querySelector(t)]],[document.documentElement]):new Ct([[t]],Dt)},jt=0;function Pt(){this._="@"+(++jt).toString(36)}Pt.prototype=function(){return new Pt}.prototype={constructor:Pt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var Ft=function(t){return"string"==typeof t?new Ct([document.querySelectorAll(t)],[document.documentElement]):new Ct([null==t?[]:t],Dt)};function Ht(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var It="$";function Bt(){}function Lt(t,n){var e=new Bt;if(t instanceof Bt)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}Bt.prototype=Lt.prototype={constructor:Bt,has:function(t){return It+t in this},get:function(t){return this[It+t]},set:function(t,n){return this[It+t]=n,this},remove:function(t){var n=It+t;return n in this&&delete this[n]},clear:function(){for(var t in this)t[0]===It&&delete this[t]},keys:function(){var t=[];for(var n in this)n[0]===It&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)n[0]===It&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)n[0]===It&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)n[0]===It&&++t;return t},empty:function(){for(var t in this)if(t[0]===It)return!1;return!0},each:function(t){for(var n in this)n[0]===It&&t(this[n],n.slice(1),this)}};var qt=Lt;function Yt(){}var Rt=qt.prototype;Yt.prototype={constructor:Yt,has:Rt.has,add:function(t){return this[It+(t+="")]=t,this},remove:Rt.remove,clear:Rt.clear,values:Rt.keys,size:Rt.size,empty:Rt.empty,each:Rt.each};var Xt=Array.prototype,zt=Xt.map,$t=Xt.slice,Vt={name:"implicit"};function Gt(){var o=qt(),a=[],r=[],i=Vt;function u(t){var n=t+"",e=o.get(n);if(!e){if(i!==Vt)return i;o.set(n,e=a.push(t))}return r[(e-1)%r.length]}return u.domain=function(t){if(!arguments.length)return a.slice();a=[],o=qt();for(var n,e,r=-1,i=t.length;++r<i;)o.has(e=(n=t[r])+"")||o.set(e,a.push(n));return u},u.range=function(t){return arguments.length?(r=$t.call(t),u):r.slice()},u.unknown=function(t){return arguments.length?(i=t,u):i},u.copy=function(){return Gt(a,r).unknown(i)},Ht.apply(u,arguments),u}function Wt(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Zt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Qt(){}var Jt=1/.7,Kt="\\s*([+-]?\\d+)\\s*",tn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",nn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",en=/^#([0-9a-f]{3})$/,rn=/^#([0-9a-f]{6})$/,on=new RegExp("^rgb\\("+[Kt,Kt,Kt]+"\\)$"),an=new RegExp("^rgb\\("+[nn,nn,nn]+"\\)$"),un=new RegExp("^rgba\\("+[Kt,Kt,Kt,tn]+"\\)$"),cn=new RegExp("^rgba\\("+[nn,nn,nn,tn]+"\\)$"),sn=new RegExp("^hsl\\("+[tn,nn,nn]+"\\)$"),ln=new RegExp("^hsla\\("+[tn,nn,nn,tn]+"\\)$"),fn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function hn(t){var n;return t=(t+"").trim().toLowerCase(),(n=en.exec(t))?new vn((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=rn.exec(t))?dn(parseInt(n[1],16)):(n=on.exec(t))?new vn(n[1],n[2],n[3],1):(n=an.exec(t))?new vn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=un.exec(t))?pn(n[1],n[2],n[3],n[4]):(n=cn.exec(t))?pn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=sn.exec(t))?wn(n[1],n[2]/100,n[3]/100,1):(n=ln.exec(t))?wn(n[1],n[2]/100,n[3]/100,n[4]):fn.hasOwnProperty(t)?dn(fn[t]):"transparent"===t?new vn(NaN,NaN,NaN,0):null}function dn(t){return new vn(t>>16&255,t>>8&255,255&t,1)}function pn(t,n,e,r){return r<=0&&(t=n=e=NaN),new vn(t,n,e,r)}function yn(t){return t instanceof Qt||(t=hn(t)),t?new vn((t=t.rgb()).r,t.g,t.b,t.opacity):new vn}function gn(t,n,e,r){return 1===arguments.length?yn(t):new vn(t,n,e,null==r?1:r)}function vn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function mn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function wn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||1<=e?t=n=NaN:n<=0&&(t=NaN),new bn(t,n,e,r)}function _n(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof bn)return new bn(t.h,t.s,t.l,t.opacity);if(t instanceof Qt||(t=hn(t)),!t)return new bn;if(t instanceof bn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,c=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=c<.5?o+i:2-o-i,a*=60):u=0<c&&c<1?0:a,new bn(a,u,c,t.opacity)}(t):new bn(t,n,e,null==r?1:r)}function bn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Mn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Wt(Qt,hn,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Wt(vn,gn,Zt(Qt,{brighter:function(t){return t=null==t?Jt:Math.pow(Jt,t),new vn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new vn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+mn(this.r)+mn(this.g)+mn(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Wt(bn,_n,Zt(Qt,{brighter:function(t){return t=null==t?Jt:Math.pow(Jt,t),new bn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new bn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new vn(Mn(240<=t?t-240:120+t,i,r),Mn(t,i,r),Mn(t<120?240+t:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var xn=Math.PI/180,An=180/Math.PI,Tn=.96422,En=1,kn=.82521,Sn=4/29,Dn=6/29,Cn=3*Dn*Dn,Un=Dn*Dn*Dn;function On(t){if(t instanceof jn)return new jn(t.l,t.a,t.b,t.opacity);if(t instanceof qn){if(isNaN(t.h))return new jn(t.l,0,0,t.opacity);var n=t.h*xn;return new jn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof vn||(t=yn(t));var e,r,i=In(t.r),o=In(t.g),a=In(t.b),u=Pn((.2225045*i+.7168786*o+.0606169*a)/En);return i===o&&o===a?e=r=u:(e=Pn((.4360747*i+.3850649*o+.1430804*a)/Tn),r=Pn((.0139322*i+.0971045*o+.7141733*a)/kn)),new jn(116*u-16,500*(e-u),200*(u-r),t.opacity)}function Nn(t,n,e,r){return 1===arguments.length?On(t):new jn(t,n,e,null==r?1:r)}function jn(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Pn(t){return Un<t?Math.pow(t,1/3):t/Cn+Sn}function Fn(t){return Dn<t?t*t*t:Cn*(t-Sn)}function Hn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function In(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Bn(t){if(t instanceof qn)return new qn(t.h,t.c,t.l,t.opacity);if(t instanceof jn||(t=On(t)),0===t.a&&0===t.b)return new qn(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*An;return new qn(n<0?360+n:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Ln(t,n,e,r){return 1===arguments.length?Bn(t):new qn(t,n,e,null==r?1:r)}function qn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}Wt(jn,Nn,Zt(Qt,{brighter:function(t){return new jn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new jn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new vn(Hn(3.1338561*(n=Tn*Fn(n))-1.6168667*(t=En*Fn(t))-.4906146*(e=kn*Fn(e))),Hn(-.9787684*n+1.9161415*t+.033454*e),Hn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Wt(qn,Ln,Zt(Qt,{brighter:function(t){return new qn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new qn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return On(this).rgb()}}));var Yn=1.78277,Rn=-.29227,Xn=-.90649,zn=1.97294,$n=zn*Xn,Vn=zn*Yn,Gn=Yn*Rn- -.14861*Xn;function Wn(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Zn)return new Zn(t.h,t.s,t.l,t.opacity);t instanceof vn||(t=yn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Gn*r+$n*n-Vn*e)/(Gn+$n-Vn),o=r-i,a=(zn*(e-i)-Rn*o)/Xn,u=Math.sqrt(a*a+o*o)/(zn*i*(1-i)),c=u?Math.atan2(a,o)*An-120:NaN;return new Zn(c<0?c+360:c,u,i,t.opacity)}(t):new Zn(t,n,e,null==r?1:r)}function Zn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Qn(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}Wt(Zn,Wn,Zt(Qt,{brighter:function(t){return t=null==t?Jt:Math.pow(Jt,t),new Zn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Zn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*xn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new vn(255*(n+e*(-.14861*r+Yn*i)),255*(n+e*(Rn*r+Xn*i)),255*(n+zn*r*e),this.opacity)}}));var Jn=function(t){return function(){return t}};function Kn(n,e){return function(t){return n+t*e}}function te(t,n){var e=n-t;return e?Kn(t,180<e||e<-180?e-360*Math.round(e/360):e):Jn(isNaN(t)?n:t)}function ne(e){return 1==(e=+e)?ee:function(t,n){return n-t?function(n,e,r){return n=Math.pow(n,r),e=Math.pow(e,r)-n,r=1/r,function(t){return Math.pow(n+t*e,r)}}(t,n,e):Jn(isNaN(t)?n:t)}}function ee(t,n){var e=n-t;return e?Kn(t,e):Jn(isNaN(t)?n:t)}var re=function t(n){var a=ne(n);function e(n,t){var e=a((n=gn(n)).r,(t=gn(t)).r),r=a(n.g,t.g),i=a(n.b,t.b),o=ee(n.opacity,t.opacity);return function(t){return n.r=e(t),n.g=r(t),n.b=i(t),n.opacity=o(t),n+""}}return e.gamma=t,e}(1);function ie(u){return function(t){var n,e,r=t.length,i=new Array(r),o=new Array(r),a=new Array(r);for(n=0;n<r;++n)e=gn(t[n]),i[n]=e.r||0,o[n]=e.g||0,a[n]=e.b||0;return i=u(i),o=u(o),a=u(a),e.opacity=1,function(t){return e.r=i(t),e.g=o(t),e.b=a(t),e+""}}}ie(function(a){var u=a.length-1;return function(t){var n=t<=0?t=0:1<=t?u-(t=1):Math.floor(t*u),e=a[n],r=a[n+1],i=0<n?a[n-1]:2*e-r,o=n<u-1?a[n+2]:2*r-e;return Qn((t-n/u)*u,i,e,r,o)}}),ie(function(a){var u=a.length;return function(t){var n=Math.floor(((t%=1)<0?++t:t)*u),e=a[(n+u-1)%u],r=a[n%u],i=a[(n+1)%u],o=a[(n+2)%u];return Qn((t-n/u)*u,e,r,i,o)}});var oe=function(n,e){return e-=n=+n,function(t){return n+e*t}},ae=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ue=new RegExp(ae.source,"g");function ce(t,r){var n,e,i,o=ae.lastIndex=ue.lastIndex=0,a=-1,u=[],c=[];for(t+="",r+="";(n=ae.exec(t))&&(e=ue.exec(r));)(i=e.index)>o&&(i=r.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(e=e[0])?u[a]?u[a]+=e:u[++a]=e:(u[++a]=null,c.push({i:a,x:oe(n,e)})),o=ue.lastIndex;return o<r.length&&(i=r.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?c[0]?function(n){return function(t){return n(t)+""}}(c[0].x):function(t){return function(){return t}}(r):(r=c.length,function(t){for(var n,e=0;e<r;++e)u[(n=c[e]).i]=n.x(t);return u.join("")})}function se(t,n,e,r,i,o){var a,u,c;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,c/=u),t*r<n*e&&(t=-t,n=-n,c=-c,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*ge,skewX:Math.atan(c)*ge,scaleX:a,scaleY:u}}var le,fe,he,de,pe=function(t,n){var e,r=typeof n;return null==n||"boolean"==r?Jn(n):("number"==r?oe:"string"==r?(e=hn(n))?(n=e,re):ce:n instanceof hn?re:n instanceof Date?function(n,e){var r=new Date;return e-=n=+n,function(t){return r.setTime(n+e*t),r}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=pe(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=pe(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:oe)(t,n)},ye=function(n,e){return e-=n=+n,function(t){return Math.round(n+e*t)}},ge=180/Math.PI,ve={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function me(e,u,c,a){function s(t){return t.length?t.pop()+" ":""}return function(t,n){var i=[],o=[];return t=e(t),n=e(n),function(t,n,e,r,i,o){if(t!==e||n!==r){var a=i.push("translate(",null,u,null,c);o.push({i:a-4,x:oe(t,e)},{i:a-2,x:oe(n,r)})}else(e||r)&&i.push("translate("+e+u+r+c)}(t.translateX,t.translateY,n.translateX,n.translateY,i,o),function(t,n,e,r){t!==n?(180<t-n?n+=360:180<n-t&&(t+=360),r.push({i:e.push(s(e)+"rotate(",null,a)-2,x:oe(t,n)})):n&&e.push(s(e)+"rotate("+n+a)}(t.rotate,n.rotate,i,o),function(t,n,e,r){t!==n?r.push({i:e.push(s(e)+"skewX(",null,a)-2,x:oe(t,n)}):n&&e.push(s(e)+"skewX("+n+a)}(t.skewX,n.skewX,i,o),function(t,n,e,r,i,o){if(t!==e||n!==r){var a=i.push(s(i)+"scale(",null,",",null,")");o.push({i:a-4,x:oe(t,e)},{i:a-2,x:oe(n,r)})}else 1===e&&1===r||i.push(s(i)+"scale("+e+","+r+")")}(t.scaleX,t.scaleY,n.scaleX,n.scaleY,i,o),t=n=null,function(t){for(var n,e=-1,r=o.length;++e<r;)i[(n=o[e]).i]=n.x(t);return i.join("")}}}var we=me(function(t){return"none"===t?ve:(le||(le=document.createElement("DIV"),fe=document.documentElement,he=document.defaultView),le.style.transform=t,t=he.getComputedStyle(fe.appendChild(le),null).getPropertyValue("transform"),fe.removeChild(le),t=t.slice(7,-1).split(","),se(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),_e=me(function(t){return null==t?ve:((de=de||document.createElementNS("http://www.w3.org/2000/svg","g")).setAttribute("transform",t),(t=de.transform.baseVal.consolidate())?(t=t.matrix,se(t.a,t.b,t.c,t.d,t.e,t.f)):ve)},", ",")",")");Math.SQRT2;function be(a){return function(n,t){var e=a((n=_n(n)).h,(t=_n(t)).h),r=ee(n.s,t.s),i=ee(n.l,t.l),o=ee(n.opacity,t.opacity);return function(t){return n.h=e(t),n.s=r(t),n.l=i(t),n.opacity=o(t),n+""}}}be(te),be(ee);function Me(a){return function(n,t){var e=a((n=Ln(n)).h,(t=Ln(t)).h),r=ee(n.c,t.c),i=ee(n.l,t.l),o=ee(n.opacity,t.opacity);return function(t){return n.h=e(t),n.c=r(t),n.l=i(t),n.opacity=o(t),n+""}}}Me(te),Me(ee);function xe(u){return function t(a){function n(n,t){var e=u((n=Wn(n)).h,(t=Wn(t)).h),r=ee(n.s,t.s),i=ee(n.l,t.l),o=ee(n.opacity,t.opacity);return function(t){return n.h=e(t),n.s=r(t),n.l=i(Math.pow(t,a)),n.opacity=o(t),n+""}}return a=+a,n.gamma=t,n}(1)}xe(te),xe(ee);var Ae=function(t){return function(){return t}},Te=function(t){return+t},Ee=[0,1];function ke(t){return t}function Se(n,e){return(e-=n=+n)?function(t){return(t-n)/e}:Ae(isNaN(e)?NaN:.5)}function De(t){var n,e=t[0],r=t[t.length-1];return r<e&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Ce(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return o=i<r?(r=Se(i,r),e(a,o)):(r=Se(r,i),e(o,a)),function(t){return o(r(t))}}function Ue(e,t,n){var r=Math.min(e.length,t.length)-1,i=new Array(r),o=new Array(r),a=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++a<r;)i[a]=Se(e[a],e[a+1]),o[a]=n(t[a],t[a+1]);return function(t){var n=u(e,t,1,r)-1;return o[n](i[n](t))}}function Oe(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Ne(){var e,r,n,i,o,a,u=Ee,c=Ee,s=pe,l=ke;function f(){return i=2<Math.min(u.length,c.length)?Ue:Ce,o=a=null,h}function h(t){return isNaN(t=+t)?n:(o=o||i(u.map(e),c,s))(e(l(t)))}return h.invert=function(t){return l(r((a=a||i(c,u.map(e),oe))(t)))},h.domain=function(t){return arguments.length?(u=zt.call(t,Te),l===ke||(l=De(u)),f()):u.slice()},h.range=function(t){return arguments.length?(c=$t.call(t),f()):c.slice()},h.rangeRound=function(t){return c=$t.call(t),s=ye,f()},h.clamp=function(t){return arguments.length?(l=t?De(u):ke,h):l!==ke},h.interpolate=function(t){return arguments.length?(s=t,f()):s},h.unknown=function(t){return arguments.length?(n=t,h):n},function(t,n){return e=t,r=n,f()}}var je=function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t};function Pe(t){return Math.log(t)}function Fe(t){return Math.exp(t)}function He(t){return-Math.log(-t)}function Ie(t){return-Math.exp(-t)}function Be(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Le(n){return function(t){return-n(-t)}}function qe(t){var h,d,n=t(Pe,Fe),p=n.domain,y=10;function e(){return h=function(n){return n===Math.E?Math.log:10===n&&Math.log10||2===n&&Math.log2||(n=Math.log(n),function(t){return Math.log(t)/n})}(y),d=function(n){return 10===n?Be:n===Math.E?Math.exp:function(t){return Math.pow(n,t)}}(y),p()[0]<0?(h=Le(h),d=Le(d),t(He,Ie)):t(Pe,Fe),n}return n.base=function(t){return arguments.length?(y=+t,e()):y},n.domain=function(t){return arguments.length?(p(t),e()):p()},n.ticks=function(t){var n,e=p(),r=e[0],i=e[e.length-1];(n=i<r)&&(c=r,r=i,i=c);var o,a,u,c=h(r),s=h(i),l=null==t?10:+t,f=[];if(!(y%1)&&s-c<l){if(c=Math.round(c)-1,s=Math.round(s)+1,0<r){for(;c<s;++c)for(a=1,o=d(c);a<y;++a)if(!((u=o*a)<r)){if(i<u)break;f.push(u)}}else for(;c<s;++c)for(a=y-1,o=d(c);1<=a;--a)if(!((u=o*a)<r)){if(i<u)break;f.push(u)}}else f=g(c,s,Math.min(s-c,l)).map(d);return n?f.reverse():f},n.tickFormat=function(t,e){if(null==e&&(e=10===y?".0e":","),"function"!=typeof e&&(e=M(e)),t===1/0)return e;null==t&&(t=10);var r=Math.max(1,y*t/n.ticks().length);return function(t){var n=t/d(Math.round(h(t)));return n*y<y-.5&&(n*=y),n<=r?e(t):""}},n.nice=function(){return p(je(p(),{floor:function(t){return d(Math.floor(h(t)))},ceil:function(t){return d(Math.ceil(h(t)))}}))},n}function Ye(){var t=qe(Ne()).domain([1,10]);return t.copy=function(){return Oe(t,Ye()).base(t.base())},Ht.apply(t,arguments),t}var Re=new Date,Xe=new Date;function ze(o,a,e,r){function u(t){return o(t=new Date(+t)),t}return(u.floor=u).ceil=function(t){return o(t=new Date(t-1)),a(t,1),o(t),t},u.round=function(t){var n=u(t),e=u.ceil(t);return t-n<e-t?n:e},u.offset=function(t,n){return a(t=new Date(+t),null==n?1:Math.floor(n)),t},u.range=function(t,n,e){var r,i=[];if(t=u.ceil(t),e=null==e?1:Math.floor(e),!(t<n&&0<e))return i;for(;i.push(r=new Date(+t)),a(t,e),o(t),r<t&&t<n;);return i},u.filter=function(e){return ze(function(t){if(t<=t)for(;o(t),!e(t);)t.setTime(t-1)},function(t,n){if(t<=t)if(n<0)for(;++n<=0;)for(;a(t,-1),!e(t););else for(;0<=--n;)for(;a(t,1),!e(t););})},e&&(u.count=function(t,n){return Re.setTime(+t),Xe.setTime(+n),o(Re),o(Xe),Math.floor(e(Re,Xe))},u.every=function(n){return n=Math.floor(n),isFinite(n)&&0<n?1<n?u.filter(r?function(t){return r(t)%n==0}:function(t){return u.count(0,t)%n==0}):u:null}),u}var $e=ze(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});$e.every=function(e){return e=Math.floor(e),isFinite(e)&&0<e?1<e?ze(function(t){t.setTime(Math.floor(t/e)*e)},function(t,n){t.setTime(+t+n*e)},function(t,n){return(n-t)/e}):$e:null};$e.range;var Ve=ze(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),Ge=(Ve.range,ze(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+6e4*n)},function(t,n){return(n-t)/6e4},function(t){return t.getMinutes()})),We=(Ge.range,ze(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),Ze=(We.range,ze(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5},function(t){return t.getDate()-1})),Qe=Ze;Ze.range;function Je(n){return ze(function(t){t.setDate(t.getDate()-(t.getDay()+7-n)%7),t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5})}var Ke=Je(0),tr=Je(1),nr=Je(2),er=Je(3),rr=Je(4),ir=Je(5),or=Je(6),ar=(Ke.range,tr.range,nr.range,er.range,rr.range,ir.range,or.range,ze(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),ur=(ar.range,ze(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));ur.every=function(e){return isFinite(e=Math.floor(e))&&0<e?ze(function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n*e)}):null};var cr=ur,sr=(ur.range,ze(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+6e4*n)},function(t,n){return(n-t)/6e4},function(t){return t.getUTCMinutes()})),lr=(sr.range,ze(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),fr=(lr.range,ze(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),hr=fr;fr.range;function dr(n){return ze(function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-n)%7),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/6048e5})}var pr=dr(0),yr=dr(1),gr=dr(2),vr=dr(3),mr=dr(4),wr=dr(5),_r=dr(6),br=(pr.range,yr.range,gr.range,vr.range,mr.range,wr.range,_r.range,ze(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),Mr=(br.range,ze(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));Mr.every=function(e){return isFinite(e=Math.floor(e))&&0<e?ze(function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)}):null};var xr=Mr;Mr.range;function Ar(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Tr(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Er(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var kr,Sr,Dr,Cr,Ur,Or,Nr,jr,Pr,Fr,Hr,Ir,Br,Lr,qr,Yr,Rr,Xr,zr,$r,Vr,Gr,Wr,Zr,Qr,Jr={"-":"",_:" ",0:"0"},Kr=/^\s*\d+/,ti=/^%/,ni=/[\\^$*+?|[\]().{}]/g;function ei(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function ri(t){return t.replace(ni,"\\$&")}function ii(t){return new RegExp("^(?:"+t.map(ri).join("|")+")","i")}function oi(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function ai(t,n,e){var r=Kr.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function ui(t,n,e){var r=Kr.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function ci(t,n,e){var r=Kr.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function si(t,n,e){var r=Kr.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function li(t,n,e){var r=Kr.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function fi(t,n,e){var r=Kr.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function hi(t,n,e){var r=Kr.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(68<+r[0]?1900:2e3),e+r[0].length):-1}function di(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function pi(t,n,e){var r=Kr.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function yi(t,n,e){var r=Kr.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function gi(t,n,e){var r=Kr.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function vi(t,n,e){var r=Kr.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function mi(t,n,e){var r=Kr.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function wi(t,n,e){var r=Kr.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function _i(t,n,e){var r=Kr.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function bi(t,n,e){var r=Kr.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Mi(t,n,e){var r=ti.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function xi(t,n,e){var r=Kr.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Ai(t,n,e){var r=Kr.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function Ti(t,n){return ei(t.getDate(),n,2)}function Ei(t,n){return ei(t.getHours(),n,2)}function ki(t,n){return ei(t.getHours()%12||12,n,2)}function Si(t,n){return ei(1+Qe.count(cr(t),t),n,3)}function Di(t,n){return ei(t.getMilliseconds(),n,3)}function Ci(t,n){return Di(t,n)+"000"}function Ui(t,n){return ei(t.getMonth()+1,n,2)}function Oi(t,n){return ei(t.getMinutes(),n,2)}function Ni(t,n){return ei(t.getSeconds(),n,2)}function ji(t){var n=t.getDay();return 0===n?7:n}function Pi(t,n){return ei(Ke.count(cr(t),t),n,2)}function Fi(t,n){var e=t.getDay();return t=4<=e||0===e?rr(t):rr.ceil(t),ei(rr.count(cr(t),t)+(4===cr(t).getDay()),n,2)}function Hi(t){return t.getDay()}function Ii(t,n){return ei(tr.count(cr(t),t),n,2)}function Bi(t,n){return ei(t.getFullYear()%100,n,2)}function Li(t,n){return ei(t.getFullYear()%1e4,n,4)}function qi(t){var n=t.getTimezoneOffset();return(0<n?"-":(n*=-1,"+"))+ei(n/60|0,"0",2)+ei(n%60,"0",2)}function Yi(t,n){return ei(t.getUTCDate(),n,2)}function Ri(t,n){return ei(t.getUTCHours(),n,2)}function Xi(t,n){return ei(t.getUTCHours()%12||12,n,2)}function zi(t,n){return ei(1+hr.count(xr(t),t),n,3)}function $i(t,n){return ei(t.getUTCMilliseconds(),n,3)}function Vi(t,n){return $i(t,n)+"000"}function Gi(t,n){return ei(t.getUTCMonth()+1,n,2)}function Wi(t,n){return ei(t.getUTCMinutes(),n,2)}function Zi(t,n){return ei(t.getUTCSeconds(),n,2)}function Qi(t){var n=t.getUTCDay();return 0===n?7:n}function Ji(t,n){return ei(pr.count(xr(t),t),n,2)}function Ki(t,n){var e=t.getUTCDay();return t=4<=e||0===e?mr(t):mr.ceil(t),ei(mr.count(xr(t),t)+(4===xr(t).getUTCDay()),n,2)}function to(t){return t.getUTCDay()}function no(t,n){return ei(yr.count(xr(t),t),n,2)}function eo(t,n){return ei(t.getUTCFullYear()%100,n,2)}function ro(t,n){return ei(t.getUTCFullYear()%1e4,n,4)}function io(){return"+0000"}function oo(){return"%"}function ao(t){return+t}function uo(t){return Math.floor(+t/1e3)}function co(c,s){return function(t){var n,e,r,i=[],o=-1,a=0,u=c.length;for(t instanceof Date||(t=new Date(+t));++o<u;)37===c.charCodeAt(o)&&(i.push(c.slice(a,o)),null!=(e=Jr[n=c.charAt(++o)])?n=c.charAt(++o):e="e"===n?" ":"0",(r=s[n])&&(n=r(t,e)),i.push(n),a=o+1);return i.push(c.slice(a,o)),i.join("")}}function so(i,o){return function(t){var n,e,r=Er(1900);if(lo(r,i,t+="",0)!=t.length)return null;if("Q"in r)return new Date(r.Q);if("p"in r&&(r.H=r.H%12+12*r.p),"V"in r){if(r.V<1||53<r.V)return null;"w"in r||(r.w=1),"Z"in r?(n=4<(e=(n=Tr(Er(r.y))).getUTCDay())||0===e?yr.ceil(n):yr(n),n=hr.offset(n,7*(r.V-1)),r.y=n.getUTCFullYear(),r.m=n.getUTCMonth(),r.d=n.getUTCDate()+(r.w+6)%7):(n=4<(e=(n=o(Er(r.y))).getDay())||0===e?tr.ceil(n):tr(n),n=Qe.offset(n,7*(r.V-1)),r.y=n.getFullYear(),r.m=n.getMonth(),r.d=n.getDate()+(r.w+6)%7)}else("W"in r||"U"in r)&&("w"in r||(r.w="u"in r?r.u%7:"W"in r?1:0),e="Z"in r?Tr(Er(r.y)).getUTCDay():o(Er(r.y)).getDay(),r.m=0,r.d="W"in r?(r.w+6)%7+7*r.W-(e+5)%7:r.w+7*r.U-(e+6)%7);return"Z"in r?(r.H+=r.Z/100|0,r.M+=r.Z%100,Tr(r)):o(r)}}function lo(t,n,e,r){for(var i,o,a=0,u=n.length,c=e.length;a<u;){if(c<=r)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=Qr[i in Jr?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}Ur=(Cr={dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}).dateTime,Or=Cr.date,Nr=Cr.time,jr=Cr.periods,Pr=Cr.days,Fr=Cr.shortDays,Hr=Cr.months,Ir=Cr.shortMonths,Br=ii(jr),Lr=oi(jr),qr=ii(Pr),Yr=oi(Pr),Rr=ii(Fr),Xr=oi(Fr),zr=ii(Hr),$r=oi(Hr),Vr=ii(Ir),Gr=oi(Ir),Zr={a:function(t){return Fr[t.getUTCDay()]},A:function(t){return Pr[t.getUTCDay()]},b:function(t){return Ir[t.getUTCMonth()]},B:function(t){return Hr[t.getUTCMonth()]},c:null,d:Yi,e:Yi,f:Vi,H:Ri,I:Xi,j:zi,L:$i,m:Gi,M:Wi,p:function(t){return jr[+(12<=t.getUTCHours())]},Q:ao,s:uo,S:Zi,u:Qi,U:Ji,V:Ki,w:to,W:no,x:null,X:null,y:eo,Y:ro,Z:io,"%":oo},Qr={a:function(t,n,e){var r=Rr.exec(n.slice(e));return r?(t.w=Xr[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=qr.exec(n.slice(e));return r?(t.w=Yr[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=Vr.exec(n.slice(e));return r?(t.m=Gr[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=zr.exec(n.slice(e));return r?(t.m=$r[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,n,e){return lo(t,Ur,n,e)},d:yi,e:yi,f:bi,H:vi,I:vi,j:gi,L:_i,m:pi,M:mi,p:function(t,n,e){var r=Br.exec(n.slice(e));return r?(t.p=Lr[r[0].toLowerCase()],e+r[0].length):-1},Q:xi,s:Ai,S:wi,u:ui,U:ci,V:si,w:ai,W:li,x:function(t,n,e){return lo(t,Or,n,e)},X:function(t,n,e){return lo(t,Nr,n,e)},y:hi,Y:fi,Z:di,"%":Mi},(Wr={a:function(t){return Fr[t.getDay()]},A:function(t){return Pr[t.getDay()]},b:function(t){return Ir[t.getMonth()]},B:function(t){return Hr[t.getMonth()]},c:null,d:Ti,e:Ti,f:Ci,H:Ei,I:ki,j:Si,L:Di,m:Ui,M:Oi,p:function(t){return jr[+(12<=t.getHours())]},Q:ao,s:uo,S:Ni,u:ji,U:Pi,V:Fi,w:Hi,W:Ii,x:null,X:null,y:Bi,Y:Li,Z:qi,"%":oo}).x=co(Or,Wr),Wr.X=co(Nr,Wr),Wr.c=co(Ur,Wr),Zr.x=co(Or,Zr),Zr.X=co(Nr,Zr),Zr.c=co(Ur,Zr),kr={format:function(t){var n=co(t+="",Wr);return n.toString=function(){return t},n},parse:function(t){var n=so(t+="",Ar);return n.toString=function(){return t},n},utcFormat:function(t){var n=co(t+="",Zr);return n.toString=function(){return t},n},utcParse:function(t){var n=so(t,Tr);return n.toString=function(){return t},n}},kr.parse,Sr=kr.utcFormat,Dr=kr.utcParse;var fo="%Y-%m-%dT%H:%M:%S.%LZ";Date.prototype.toISOString||Sr(fo);+new Date("2000-01-01T00:00:00.000Z")||Dr(fo);var ho={value:function(){}};function po(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new yo(r)}function yo(t){this._=t}function go(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function vo(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ho,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}yo.prototype=po.prototype={constructor:yo,on:function(t,n){var e,r=this._,i=function(t,r){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(0<=e&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})}(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=vo(r[e],t.name,n);else if(null==n)for(e in r)r[e]=vo(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=go(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new yo(t)},call:function(t,n){if(0<(e=arguments.length-2))for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var mo,wo,_o=po,bo=0,Mo=0,xo=0,Ao=1e3,To=0,Eo=0,ko=0,So="object"==typeof performance&&performance.now?performance:Date,Do="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Co(){return Eo||(Do(Uo),Eo=So.now()+ko)}function Uo(){Eo=0}function Oo(){this._call=this._time=this._next=null}function No(t,n,e){var r=new Oo;return r.restart(t,n,e),r}function jo(){Eo=(To=So.now())+ko,bo=Mo=0;try{!function(){Co(),++bo;for(var t,n=mo;n;)0<=(t=Eo-n._time)&&n._call.call(null,t),n=n._next;--bo}()}finally{bo=0,function(){var t,n,e=mo,r=1/0;for(;e;)e=e._call?(r>e._time&&(r=e._time),(t=e)._next):(n=e._next,e._next=null,t?t._next=n:mo=n);wo=t,Fo(r)}(),Eo=0}}function Po(){var t=So.now(),n=t-To;Ao<n&&(ko-=n,To=t)}function Fo(t){bo||(Mo=Mo&&clearTimeout(Mo),24<t-Eo?(t<1/0&&(Mo=setTimeout(jo,t-So.now()-ko)),xo=xo&&clearInterval(xo)):(xo||(To=So.now(),xo=setInterval(Po,Ao)),bo=1,Do(jo)))}Oo.prototype=No.prototype={constructor:Oo,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Co():+e)+(null==n?0:+n),this._next||wo===this||(wo?wo._next=this:mo=this,wo=this),this._call=t,this._time=e,Fo()},stop:function(){this._call&&(this._call=null,this._time=1/0,Fo())}};function Ho(n,e,t){var r=new Oo;return e=null==e?0:+e,r.restart(function(t){r.stop(),n(t+e)},e,t),r}function Io(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(o,a,u){var c,s=o.__transition;function l(t){var n,e,r,i;if(1!==u.state)return h();for(n in s)if((i=s[n]).name===u.name){if(i.state===Yo)return Ho(l);4===i.state?(i.state=6,i.timer.stop(),i.on.call("interrupt",o,o.__data__,i.index,i.group),delete s[n]):+n<a&&(i.state=6,i.timer.stop(),i.on.call("cancel",o,o.__data__,i.index,i.group),delete s[n])}if(Ho(function(){u.state===Yo&&(u.state=4,u.timer.restart(f,u.delay,u.time),f(t))}),u.state=2,u.on.call("start",o,o.__data__,u.index,u.group),2===u.state){for(u.state=Yo,c=new Array(r=u.tween.length),n=0,e=-1;n<r;++n)(i=u.tween[n].value.call(o,o.__data__,u.index,u.group))&&(c[++e]=i);c.length=e+1}}function f(t){for(var n=t<u.duration?u.ease.call(null,t/u.duration):(u.timer.restart(h),u.state=5,1),e=-1,r=c.length;++e<r;)c[e].call(o,n);5===u.state&&(u.on.call("end",o,o.__data__,u.index,u.group),h())}function h(){for(var t in u.state=6,u.timer.stop(),delete s[a],s)return;delete o.__transition}(s[a]=u).timer=No(function(t){u.state=1,u.timer.restart(l,u.delay,u.time),u.delay<=t&&l(t-u.delay)},0,u.time)}(t,e,{name:n,index:r,group:i,on:Bo,tween:Lo,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:qo})}var Bo=_o("start","end","cancel","interrupt"),Lo=[],qo=0,Yo=3;function Ro(t,n){var e=zo(t,n);if(e.state>qo)throw new Error("too late; already scheduled");return e}function Xo(t,n){var e=zo(t,n);if(e.state>Yo)throw new Error("too late; already running");return e}function zo(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function $o(t,n,e){var r=t._id;return t.each(function(){var t=Xo(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return zo(t,r).value[n]}}function Vo(t,n){var e;return("number"==typeof n?oe:n instanceof hn?re:(e=hn(n))?(n=e,re):ce)(t,n)}var Go=Ot.prototype.constructor;function Wo(t){return function(){this.style.removeProperty(t)}}var Zo=0;function Qo(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Jo(){return++Zo}var Ko=Ot.prototype;Qo.prototype=function(t){return Ot().transition(t)}.prototype={constructor:Qo,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=J(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,c,s=r[a],l=s.length,f=o[a]=new Array(l),h=0;h<l;++h)(u=s[h])&&(c=t.call(u,u.__data__,h,s))&&("__data__"in u&&(c.__data__=u.__data__),f[h]=c,Io(f[h],n,e,h,f,zo(u,e)));return new Qo(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=tt(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var c,s=r[u],l=s.length,f=0;f<l;++f)if(c=s[f]){for(var h,d=t.call(c,c.__data__,f,s),p=zo(c,e),y=0,g=d.length;y<g;++y)(h=d[y])&&Io(h,n,e,y,d,p);o.push(d),a.push(c)}return new Qo(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=nt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new Qo(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,s=n[u],l=e[u],f=s.length,h=a[u]=new Array(f),d=0;d<f;++d)(c=s[d]||l[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new Qo(a,this._parents,this._name,this._id)},selection:function(){return new Go(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Jo(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,s=0;s<c;++s)if(a=u[s]){var l=zo(a,n);Io(a,t,e,s,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Qo(r,this._parents,t,e)},call:Ko.call,nodes:Ko.nodes,node:Ko.node,size:Ko.size,empty:Ko.empty,each:Ko.each,on:function(t,n){var e=this._id;return arguments.length<2?zo(this.node(),e).on.on(t):this.each(function(e,r,i){var o,a,u=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return 0<=n&&(t=t.slice(0,n)),!t||"start"===t})}(r)?Ro:Xo;return function(){var t=u(this,e),n=t.on;n!==o&&(a=(o=n).copy()).on(r,i),t.on=a}}(e,t,n))},attr:function(t,n){var e=V(t),r="transform"===e?_e:Vo;return this.attrTween(t,"function"==typeof n?(e.local?function(r,i,o){var a,u,c;return function(){var t,n,e=o(this);if(null!=e)return(t=this.getAttributeNS(r.space,r.local))===(n=e+"")?null:t===a&&n===u?c:(u=n,c=i(a=t,e));this.removeAttributeNS(r.space,r.local)}}:function(r,i,o){var a,u,c;return function(){var t,n,e=o(this);if(null!=e)return(t=this.getAttribute(r))===(n=e+"")?null:t===a&&n===u?c:(u=n,c=i(a=t,e));this.removeAttribute(r)}})(e,r,$o(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(n,e,r){var i,o,a=r+"";return function(){var t=this.getAttributeNS(n.space,n.local);return t===a?null:t===i?o:o=e(i=t,r)}}:function(n,e,r){var i,o,a=r+"";return function(){var t=this.getAttribute(n);return t===a?null:t===i?o:o=e(i=t,r)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=V(t);return this.tween(e,(r.local?function(n,e){var r,i;function t(){var t=e.apply(this,arguments);return t!==i&&(r=(i=t)&&function(n,e){return function(t){this.setAttributeNS(n.space,n.local,e(t))}}(n,t)),r}return t._value=e,t}:function(n,e){var r,i;function t(){var t=e.apply(this,arguments);return t!==i&&(r=(i=t)&&function(n,e){return function(t){this.setAttribute(n,e(t))}}(n,t)),r}return t._value=e,t})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?we:Vo;return null==n?this.styleTween(t,function(e,r){var i,o,a;return function(){var t=ct(this,e),n=(this.style.removeProperty(e),ct(this,e));return t===n?null:t===i&&n===o?a:a=r(i=t,o=n)}}(t,r)).on("end.style."+t,Wo(t)):"function"==typeof n?this.styleTween(t,function(r,i,o){var a,u,c;return function(){var t=ct(this,r),n=o(this),e=n+"";return null==n&&(this.style.removeProperty(r),e=n=ct(this,r)),t===e?null:t===a&&e===u?c:(u=e,c=i(a=t,n))}}(t,r,$o(this,"style."+t,n))).each(function(r,i){var o,a,u,c,s="style."+i,l="end."+s;return function(){var t=Xo(this,r),n=t.on,e=null==t.value[s]?c=c||Wo(i):void 0;n===o&&u===e||(a=(o=n).copy()).on(l,u=e),t.on=a}}(this._id,t)):this.styleTween(t,function(n,e,r){var i,o,a=r+"";return function(){var t=ct(this,n);return t===a?null:t===i?o:o=e(i=t,r)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(n,e,r){var i,o;function t(){var t=e.apply(this,arguments);return t!==o&&(i=(o=t)&&function(n,e,r){return function(t){this.style.setProperty(n,e(t),r)}}(n,t,r)),i}return t._value=e,t}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(n){return function(){var t=n(this);this.textContent=null==t?"":t}}($o(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",function(e){return function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=zo(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(i,o){var a,u;return function(){var t=Xo(this,i),n=t.tween;if(n!==a)for(var e=0,r=(u=a=n).length;e<r;++e)if(u[e].name===o){(u=u.slice()).splice(e,1);break}t.tween=u}}:function(o,a,u){var c,s;if("function"!=typeof u)throw new Error;return function(){var t=Xo(this,o),n=t.tween;if(n!==c){s=(c=n).slice();for(var e={name:a,value:u},r=0,i=s.length;r<i;++r)if(s[r].name===a){s[r]=e;break}r===i&&s.push(e)}t.tween=s}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Ro(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Ro(this,t).delay=n}})(n,t)):zo(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Xo(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Xo(this,t).duration=n}})(n,t)):zo(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){Xo(this,t).ease=n}}(n,t)):zo(this.node(),n).ease},end:function(){var i,o,a=this,u=a._id,c=a.size();return new Promise(function(t,n){var e={value:n},r={value:function(){0==--c&&t()}};a.each(function(){var t=Xo(this,u),n=t.on;n!==i&&((o=(i=n).copy())._.cancel.push(e),o._.interrupt.push(e),o._.end.push(r)),t.on=o})})}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;var ta=1.70158,na=(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(ta),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(ta),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(ta),2*Math.PI),ea=(function n(e,r){var i=Math.asin(1/(e=Math.max(1,e)))*(r/=na);function t(t){return e*Math.pow(2,10*--t)*Math.sin((i-t)/r)}return t.amplitude=function(t){return n(t,r*na)},t.period=function(t){return n(e,t)},t}(1,.3),function n(e,r){var i=Math.asin(1/(e=Math.max(1,e)))*(r/=na);function t(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/r)}return t.amplitude=function(t){return n(t,r*na)},t.period=function(t){return n(e,t)},t}(1,.3),function n(e,r){var i=Math.asin(1/(e=Math.max(1,e)))*(r/=na);function t(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((i-t)/r):2-e*Math.pow(2,-10*t)*Math.sin((i+t)/r))/2}return t.amplitude=function(t){return n(t,r*na)},t.period=function(t){return n(e,t)},t}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function ra(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return ea.time=Co(),ea;return e}Ot.prototype.interrupt=function(t){return this.each(function(){!function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=2<e.state&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)})},Ot.prototype.transition=function(t){var n,e;t=t instanceof Qo?(n=t._id,t._name):(n=Jo(),(e=ea).time=Co(),null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,s=0;s<c;++s)(a=u[s])&&Io(a,t,n,s,u,e||ra(a,n));return new Qo(r,this._parents,t,n)};var ia=Nt(".tooltip"),oa={show:function(t){var n=xt.pageY,e=xt.pageX;e+10>document.body.clientWidth-215&&(e=document.body.clientWidth+5-215),ia.transition().duration(200).style("opacity",.9).on("end",function(){ia.classed("isActive",!0),ia.on("click",this.hide)}),ia.html(t).style("visibility","visible").style("left",e+"px").style("top",n+"px")},hide:function(){ia.transition().duration(500).style("opacity",0)},formatContent:function(t){var i='<ul class="tooltip-list">';return t.forEach(function(t,n){var e=null;t.class&&(e=t.class);var r=Object.keys(t)[0];i+='<li class="'.concat(e,'"><span class="tooltip-label">').concat(r,":</span> ").concat(t[r],"</li>")}),i+="</ul>"}};function aa(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var ua,ca,sa,la,fa,ha,da,pa,ya=M(".3s"),ga=M(".2f"),va=["canada","china","eu","mexico"],ma=["#9EB040","#FE5000","#0AA4CF","#F2AF19","#fff"],wa={top:10,right:5,bottom:10,left:5},_a=Nt(".chart"),ba=8,Ma=11,xa=12,Aa=48,Ta=va,Ea=[];function ka(l){function f(){ca=f.width(),sa=.8*f.width(),la=function(t,n,e,r){var i,o=t-2,a=n-2,u=Math.floor(o/e),c=Math.floor(a/r);i=u<=c?u:c;return i}(ca-Ma*xa-wa.right-wa.left,sa-Ma*xa-wa.top-wa.bottom,Ma,ba);!function(t,n,e){for(var r=[],i=1,o=1,a=e,u=0;u<n;u++){r.push([]);for(var c=0;c<t;c++)r[u].push({x:i,y:o,width:a,height:a}),i+=a;i=1,o+=a}}(Ma,ba,la);var t=document.querySelectorAll(".map").length?_a.selectAll(".map"):Nt(".chart").append("svg");t.attr("width",ca+wa.left+wa.right).attr("height",sa+wa.top+wa.bottom).attr("class","map").attr("viewBox","0 0 "+(ca+wa.left+wa.right)+" "+(sa+wa.top+wa.bottom)),Ft("input").on("click",r.key.click);var n=document.querySelectorAll(".gridmap").length?_a.selectAll(".gridmap"):t.append("g").attr("class","gridmap"),e=document.querySelectorAll(".group").length?n.selectAll(".group"):n.selectAll(".group").data(l).enter().append("g").attr("class",function(t){return"group "+t.code});e.data(l).attr("x",function(t){return(t.col-1)*la+xa*t.col}).attr("y",function(t){return(t.row-1)*la+xa*t.row}),'"xsmall"'!==getComputedStyle(document.body).getPropertyValue("--breakpoint")&&n.selectAll(".group").on("mouseover",r.states.mouseover).on("mouseleave",r.states.mouseleave),e.each(function(t,n,e){(document.querySelector(".state.".concat(t.code))?Nt(e[n]).selectAll(".state.".concat(t.code)):Nt(e[n]).selectAll(".state").data([t]).enter().append("rect").attr("class",function(t){return"state "+t.code})).attr("fill","#fff").attr("stroke",function(t){return ha(t.totaldollars)}).attr("stroke-width",function(t){return da(t.totaldollars)}).attr("x",function(t){return(t.col-1)*la+xa*t.col}).attr("y",function(t){return(t.row-1)*la+xa*t.row}).attr("width",la+2).attr("height",la+2)})}ha=Ye().domain(c(l,function(t){return+t.totaldollars})).range(["#E5E5E5","#5E5E5E"]),da=Ye().domain(c(l,function(t){return+t.totaldollars})).range(["1","5"]),pa=Gt().domain([].concat(va,["other"])).range(ma),f.width=function(){if(!arguments.length)return ca;ca=(arguments.length<=0?void 0:arguments[0])-wa.left-wa.right},f.height=function(){if(!arguments.length)return sa;sa=(arguments.length<=0?void 0:arguments[0])-wa.top-wa.bottom};var r={key:{click:function(t){Nt(".stateModal").remove();var n=["legend-label","active","other","all"],e=this.classList,r=e.contains("all"),i=this.checked,o=(Nt("input.all").node().checked,aa(e).find(function(t){return!(-1<n.indexOf(t))})),a=Nt("input.all").node();o&&-1<Ta.indexOf(o)?(Ta=Ta.filter(function(t){return t!==o}),a.checked=!1):o&&Ta.unshift(o),4!==Ta.length?a.checked=!1:Nt("input.all").node().checked=!0,r&&i?(Ta=va,Ft("input").each(function(t,n,e){e[n].checked=!0})):r&&!i&&(Ta=[],Ft("input").each(function(t,n,e){e[n].checked=!1})),_a.call(ua.drawPercents)}},states:{mouseover:function(t){r.states.showTooltip(t)},mouseleave:function(t){oa.hide()},click:function(t){oa.hide(),fa=t,_a.call(ua.drawState,t)},showTooltip:function(n){var t='\n        <p class="tooltip-heading">\n          '.concat(n.state,'\n        </p>\n        <p class="tooltip-body">\n          $').concat(ya(n.totaldollars).replace(/G/,"B"),' Total Trade (2017)\n        </p>\n        <ul class="tooltip-list">\n        ').concat(va.map(function(t){return'<li class="'.concat(t,'">').concat(t.charAt(0).toUpperCase()+t.slice(1),": ").concat(n[t]?ga(n[t]):0,"%</li>")}).join(""),'\n\n        </ul>\n        <p class="tooltip-footer">\n          ').concat(ga(n.grandtotal),"% of Total (2017)\n        </p>\n        ");oa.show(t)}}};return{drawGridMap:f,drawPercents:function(){pa=Gt().domain([].concat(va,["other"])).range(ma.map(function(t,n){var e=[];return Ta.forEach(function(t){e.push([].concat(va,["other"]).indexOf(t))}),-1<e.indexOf(n)?t:"#fff"})),Ft(".group").each(function(n,t,e){var r={};va.forEach(function(t){r[t]=Array(Math.round(n[t]/100*100)).fill({state:n.code,country:t})});var i=[];(Ea=va.filter(function(t){return Ta.indexOf(t)<0})).forEach(function(t){i=i.concat(r[t])}),Ta.forEach(function(t){i=i.concat(r[t])}),i=Array(100-i.length).fill({state:n.code,country:"other"}).concat(i);var o=Nt(e[t]).attr("x"),a=Nt(e[t]).attr("y"),u=Nt(e[t]).selectAll(".percent.".concat(n.code)).data(i,function(t){return t});u.exit().remove(),u.enter().append("rect").attr("width",(la-xa/2)/10).attr("height",(la-xa/2)/10).attr("stroke","#fff").attr("stroke-width","0.25px").merge(u).attr("class",function(t){return"percent ".concat(n.code," ").concat(t.country)}).attr("x",function(t,n){var e=i.findIndex(function(t){return!(-1<[].concat(aa(Ea),["other"]).indexOf(t.country))});return e=0<=e?e:null,(10*Math.ceil((n+1)/10)<=10*Math.ceil(e/10)?Math.abs(99-n):n)%10*(la-2)/10+parseInt(o,10)+2}).attr("y",function(t,n){return 2+(Math.ceil((n+1)/10)*(la-2)/10+parseInt(a,10)-la/10+1)}).transition().duration(600).attr("fill",function(t){return pa(t.country)});var c=Nt(e[t]).selectAll(".label.".concat(n.code));c.remove(),(c=Nt(e[t]).selectAll(".label.".concat(n.code)).data([n]).enter().append("text").attr("class","label "+n.code)).attr("x",function(t){return(t.col-1)*la+la/2+xa*t.col}).attr("y",function(t){return(t.row-1)*la+(la/2-3)+xa*t.row}).style("text-anchor","middle").text(n.code)}),Ft(".group").on("click",r.states.click)},drawState:function(t,n){Nt(".stateModal").remove(),pa=Gt().domain([].concat(va,["other"])).range(ma);var e=l.filter(function(t){return t.code===n.code});ca=f.width();var r=.3*(sa=f.width()),i=_a.selectAll(".map");_a.selectAll(".gridmap"),i.append("g").attr("class","stateModal"),Nt(".stateModal").append("rect").attr("width",ca).attr("height",sa).attr("fill","#000").attr("opacity","0.3"),Nt(".stateModal").append("rect").attr("width",.75*ca).attr("height",.45*sa).attr("x",ca/7.5).attr("y",ca/7.5).attr("fill","#fff").attr("stroke","#000").attr("stroke-width","1.5px").attr("paint-order","stroke"),Nt(".stateModal").append("foreignObject").attr("cursor","pointer").attr("width",ca/10).attr("height",sa/20).attr("x",ca-ca/7.5-2*xa).attr("y",ca/7.5+xa).append("xhtml:div").attr("class","icon-close-lg").on("click",function(){Nt(".stateModal").remove()}),Nt(".stateModal").selectAll(".stateBorder").data(e).enter().append("rect").attr("class","stateBorder").attr("fill","#fff").attr("stroke",function(t){return ha(t.totaldollars)}).attr("stroke-width",function(t){return da(t.totaldollars)}).attr("x",ca/5).attr("y",ca/5+xa).attr("width",r-3).attr("height",r-2);var o={};va.forEach(function(t){o[t]=Array(Math.round(e[0][t]/100*100)).fill({state:e[0].code,country:t})});var a=[];(Ea=va.filter(function(t){return Ta.indexOf(t)<0})).forEach(function(t){a=a.concat(o[t])}),Ta.forEach(function(t){a=a.concat(o[t])}),a=Array(100-a.length).fill({state:e[0].code,country:"other"}).concat(a);var u=Nt(".stateBorder").attr("x"),c=Nt(".stateBorder").attr("y"),s=(Nt(".stateModal").selectAll(".percentModal.".concat(e[0].code)).data(a,function(t){return t}).enter().append("rect").attr("class",function(t){return"percent ".concat(e[0].code," ").concat(t.country)}).attr("fill",function(t){return pa(t.country)}).attr("x",function(t,n){var e=a.findIndex(function(t){return!(-1<[].concat(aa(Ea),["other"]).indexOf(t.country))});return e=0<=e?e:null,(10*Math.ceil((n+1)/10)<=10*Math.ceil(e/10)?Math.abs(99-n):n)%10*(r-2)/10+parseInt(u,10)+2}).attr("y",function(t,n){return 2+(Math.ceil((n+1)/10)*(r-2)/10+parseInt(c,10)-r/10+1)}).attr("height",0).attr("width",(r-Aa)/10).attr("height",(r-Aa)/10),parseInt(u,10)+r+xa);Nt(".stateModal").append("foreignObject").attr("x",s).attr("y",parseInt(c,10)-xa).attr("width",ca-r).attr("height",sa).append("xhtml:div").html('<div class="modal-heading">\n                '.concat(n.state,'\n              </div>\n              <div class="modal-body">\n                $').concat(ya(n.totaldollars).replace(/G/,"B"),' Total Trade (2017)\n              </div>\n              <ul class="modal-list">\n              ').concat(va.map(function(t){return'<li class="'.concat(t,'">').concat(t.charAt(0).toUpperCase()+t.slice(1),": ").concat(e[0][t]?ga(e[0][t]):0,"%</li> ")}).join(""),'\n\n              </ul> <div class="modal-footer">\n                  ').concat(ga(n.grandtotal),"% of Total (2017)\n                </div>"))},interactions:r}}function Sa(){if(ua){var t=_a.node().offsetWidth;ua.drawGridMap.width(t),ua.drawGridMap.height(t),_a.call(ua.drawGridMap),_a.call(ua.drawPercents),Nt(".stateModal").size()&&(Nt(".stateModal").remove(),ua.interactions.states.click(fa))}}var Da={init:function(t){_a.datum(t),ua=ka(t),Sa()},draw:ka,resize:Sa};Object(x.polyfill)();var Ca;$("https://spreadsheets.google.com/feeds/list/".concat("1qmhbztaMBKatqZkT4dQQsEm_j2Xl5d9Mp3zKmmdrqy4","/1/public/values?alt=json")).then(function(t){return t.json()}).then(function(t){Ca=function(t){return t.map(function(t){var e=t,r={};return Object.keys(e).forEach(function(t){var n=t;-1<n.indexOf("gsx$")&&(r[n.replace("gsx$","")]=e[n].$t)}),r})}(t.feed.entry)}).then(function(){var t=c(Ca,function(t){return+t.totaldollars});document.querySelector(".min").innerHTML="$"+M(",.0f")(t[0]).replace(/G/,"B"),document.querySelector(".max").innerHTML="$"+M(",.0f")(t[1]).replace(/G/,"B"),Da.init(Ca)}),window.addEventListener("resize",Da.resize)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,